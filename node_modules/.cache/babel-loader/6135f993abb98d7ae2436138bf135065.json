{"ast":null,"code":"import ROLES from 'constants/roles';\nexport function configureFakeBackend() {\n  var users = [{\n    id: 1,\n    username: 'test',\n    password: 'test',\n    firstName: 'Test',\n    lastName: 'User',\n    role: ROLES.SUPER_ADMIN\n  }, {\n    id: 2,\n    username: 'test1',\n    password: 'test1',\n    firstName: 'Test1',\n    lastName: 'User1',\n    role: ROLES.COR_SUPER_ADMIN\n  }, {\n    id: 3,\n    username: 'test2',\n    password: 'test2',\n    firstName: 'Test2',\n    lastName: 'User2',\n    role: ROLES.SUPERVISOR_ADMIN\n  }, {\n    id: 4,\n    username: 'test3',\n    password: 'test3',\n    firstName: 'Test3',\n    lastName: 'User3',\n    role: ROLES.PROFESSIONAL\n  }, {\n    id: 5,\n    username: 'test4',\n    password: 'test4',\n    firstName: 'Test4',\n    lastName: 'User4',\n    role: ROLES.CONSUMER\n  }, {\n    id: 6,\n    username: 'test5',\n    password: 'test5',\n    firstName: 'Test5',\n    lastName: 'User5',\n    role: ROLES.FREE_APP_SUITE\n  }, {\n    id: 7,\n    username: 'test6',\n    password: 'test6',\n    firstName: 'Test6',\n    lastName: 'User6',\n    role: ROLES.VIEW_ONLY\n  }];\n  var realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          // get parameters from post request\n          var params = JSON.parse(opts.body);\n\n          // find if any user matches login credentials\n          var filteredUsers = users.filter(function (user) {\n            return user.username === params.username && user.password === params.password;\n          });\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            var user = filteredUsers[0];\n            var responseJson = {\n              id: user.id,\n              username: user.username,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              role: user.role,\n              token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n            };\n            resolve({\n              ok: true,\n              json: function json() {\n                return responseJson;\n              }\n            });\n          } else {\n            // else return error\n            reject('Username or password is incorrect');\n          }\n          return;\n        }\n\n        // register\n        if (url.endsWith('/users/register') && opts.method === 'POST') {\n          // get parameters from post request\n          var _params = JSON.parse(opts.body);\n\n          // add new users\n          var _params$fullname$spli = _params.fullname.split(\" \"),\n            firstName = _params$fullname$spli.firstName,\n            lastName = _params$fullname$spli.lastName;\n          var newUser = {\n            id: users.length + 1,\n            username: firstName,\n            password: _params.password,\n            firstName: firstName,\n            lastName: lastName,\n            role: 'Admin'\n          };\n          users.push({\n            newUser: newUser\n          });\n          var _responseJson = {\n            id: newUser.id,\n            username: newUser.username,\n            firstName: newUser.firstName,\n            lastName: newUser.lastName,\n            role: newUser.role,\n            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n          };\n          resolve({\n            ok: true,\n            json: function json() {\n              return _responseJson;\n            }\n          });\n          return;\n        }\n\n        // forget password\n        if (url.endsWith('/users/password-reset') && opts.method === 'POST') {\n          // get parameters from post request\n          var _params2 = JSON.parse(opts.body);\n\n          // find if any user matches login credentials\n          var _filteredUsers = users.filter(function (user) {\n            return user.username === _params2.username;\n          });\n          if (_filteredUsers.length) {\n            var _responseJson2 = {\n              message: \"We've sent you a link to reset password to your registered email.\"\n            };\n            resolve({\n              ok: true,\n              json: function json() {\n                return _responseJson2;\n              }\n            });\n          } else {\n            // else return error\n            reject('Sorry, we could not find any registered user with entered username');\n          }\n          return;\n        }\n\n        // get users\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4') {\n            resolve({\n              ok: true,\n              json: function json() {\n                return users;\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n          return;\n        }\n\n        // pass through any requests not handled above\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}","map":{"version":3,"names":["ROLES","configureFakeBackend","users","id","username","password","firstName","lastName","role","SUPER_ADMIN","COR_SUPER_ADMIN","SUPERVISOR_ADMIN","PROFESSIONAL","CONSUMER","FREE_APP_SUITE","VIEW_ONLY","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","filteredUsers","filter","user","length","responseJson","token","ok","json","_params$fullname$spli","fullname","split","newUser","push","message","headers","Authorization","then","response"],"sources":["/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/src/helpers/fake-backend.js"],"sourcesContent":["import ROLES from 'constants/roles';\n\nexport function configureFakeBackend() {\n    let users = [\n        { id: 1, username: 'test', password: 'test', firstName: 'Test', lastName: 'User', role: ROLES.SUPER_ADMIN },\n        { id: 2, username: 'test1', password: 'test1', firstName: 'Test1', lastName: 'User1', role: ROLES.COR_SUPER_ADMIN },\n        { id: 3, username: 'test2', password: 'test2', firstName: 'Test2', lastName: 'User2', role: ROLES.SUPERVISOR_ADMIN },\n        { id: 4, username: 'test3', password: 'test3', firstName: 'Test3', lastName: 'User3', role: ROLES.PROFESSIONAL },\n        { id: 5, username: 'test4', password: 'test4', firstName: 'Test4', lastName: 'User4', role: ROLES.CONSUMER },\n        { id: 6, username: 'test5', password: 'test5', firstName: 'Test5', lastName: 'User5', role: ROLES.FREE_APP_SUITE },\n        { id: 7, username: 'test6', password: 'test6', firstName: 'Test6', lastName: 'User6', role: ROLES.VIEW_ONLY },\n    ];\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {\n\n                // authenticate\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username && user.password === params.password;\n                    });\n\n                    if (filteredUsers.length) {\n                        // if login details are valid return user details and fake jwt token\n                        let user = filteredUsers[0];\n                        let responseJson = {\n                            id: user.id,\n                            username: user.username,\n                            firstName: user.firstName,\n                            lastName: user.lastName,\n                            role: user.role,\n                            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Username or password is incorrect');\n                    }\n                    return;\n                }\n\n                // register\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // add new users\n                    let { firstName, lastName } = params.fullname.split(\" \");\n                    let newUser = { id: users.length + 1, username: firstName, password: params.password, firstName: firstName, lastName: lastName, role: 'Admin' }\n                    users.push({ newUser })\n\n                    let responseJson = {\n                        id: newUser.id,\n                        username: newUser.username,\n                        firstName: newUser.firstName,\n                        lastName: newUser.lastName,\n                        role: newUser.role,\n                        token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n                    };\n                    resolve({ ok: true, json: () => responseJson });\n                    return;\n                }\n\n                // forget password\n                if (url.endsWith('/users/password-reset') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username;\n                    });\n\n                    if (filteredUsers.length) {\n                        let responseJson = {\n                            message: \"We've sent you a link to reset password to your registered email.\"\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Sorry, we could not find any registered user with entered username');\n                    }\n                    return;\n                }\n\n                // get users\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n                    if (opts.headers && opts.headers.Authorization === 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4') {\n                        resolve({ ok: true, json: () => users });\n                    } else {\n                        // return 401 not authorised if token is null or invalid\n                        reject('Unauthorised');\n                    }\n\n                    return;\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n\n            }, 500);\n        });\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}