{"ast":null,"code":"import { __assign, __spreadArrays, __extends, __rest } from 'tslib';\nimport { pipe, angle, degreesToRadians, distance, isPoint3D, isPoint, mix, pointFromVector, progress, radiansToDegrees, smoothFrame, velocityPerFrame, velocityPerSecond, mixComplex, mixColor, clamp, applyOffset, conditional, interpolate, mixArray, smooth, snap, springForce, springForceExpo, springForceLinear, wrap } from '@popmotion/popcorn';\nimport sync, { getFrameData, cancelSync } from 'framesync';\nimport { color, complex, px, percent, degrees, vh, vw, number } from 'style-value-types';\nimport * as styleValueTypes from 'style-value-types';\nexport { styleValueTypes as valueTypes };\nimport { createReversedEasing, linear, easeOut, easeInOut } from '@popmotion/easing';\nimport * as easing from '@popmotion/easing';\nexport { easing };\nimport styler from 'stylefire';\nexport { default as styler } from 'stylefire';\nimport { warning } from 'hey-listen';\nvar Chainable = /*#__PURE__*/function () {\n  function Chainable(props) {\n    if (props === void 0) {\n      props = {};\n    }\n    this.props = props;\n  }\n  Chainable.prototype.applyMiddleware = function (middleware) {\n    return this.create(__assign(__assign({}, this.props), {\n      middleware: this.props.middleware ? __spreadArrays([middleware], this.props.middleware) : [middleware]\n    }));\n  };\n  Chainable.prototype.pipe = function () {\n    var funcs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      funcs[_i] = arguments[_i];\n    }\n    var pipedUpdate = funcs.length === 1 ? funcs[0] : pipe.apply(void 0, funcs);\n    return this.applyMiddleware(function (update) {\n      return function (v) {\n        return update(pipedUpdate(v));\n      };\n    });\n  };\n  Chainable.prototype.while = function (predicate) {\n    return this.applyMiddleware(function (update, complete) {\n      return function (v) {\n        return predicate(v) ? update(v) : complete();\n      };\n    });\n  };\n  Chainable.prototype.filter = function (predicate) {\n    return this.applyMiddleware(function (update) {\n      return function (v) {\n        return predicate(v) && update(v);\n      };\n    });\n  };\n  return Chainable;\n}();\nvar Observer = /*#__PURE__*/function () {\n  function Observer(_a, observer) {\n    var _this = this;\n    var middleware = _a.middleware,\n      onComplete = _a.onComplete;\n    this.isActive = true;\n    this.update = function (v) {\n      if (_this.observer.update) _this.updateObserver(v);\n    };\n    this.complete = function () {\n      if (_this.observer.complete && _this.isActive) _this.observer.complete();\n      if (_this.onComplete) _this.onComplete();\n      _this.isActive = false;\n    };\n    this.error = function (err) {\n      if (_this.observer.error && _this.isActive) _this.observer.error(err);\n      _this.isActive = false;\n    };\n    this.observer = observer;\n    this.updateObserver = function (v) {\n      return observer.update(v);\n    };\n    this.onComplete = onComplete;\n    if (observer.update && middleware && middleware.length) {\n      middleware.forEach(function (m) {\n        return _this.updateObserver = m(_this.updateObserver, _this.complete);\n      });\n    }\n  }\n  return Observer;\n}();\nvar createObserver = function createObserver(observerCandidate, _a, onComplete) {\n  var middleware = _a.middleware;\n  if (typeof observerCandidate === 'function') {\n    return new Observer({\n      middleware: middleware,\n      onComplete: onComplete\n    }, {\n      update: observerCandidate\n    });\n  } else {\n    return new Observer({\n      middleware: middleware,\n      onComplete: onComplete\n    }, observerCandidate);\n  }\n};\nvar Action = /*#__PURE__*/function (_super) {\n  __extends(Action, _super);\n  function Action() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Action.prototype.create = function (props) {\n    return new Action(props);\n  };\n  Action.prototype.start = function (observerCandidate) {\n    if (observerCandidate === void 0) {\n      observerCandidate = {};\n    }\n    var isComplete = false;\n    var subscription = {\n      stop: function stop() {\n        return undefined;\n      }\n    };\n    var _a = this.props,\n      init = _a.init,\n      observerProps = __rest(_a, [\"init\"]);\n    var observer = createObserver(observerCandidate, observerProps, function () {\n      isComplete = true;\n      subscription.stop();\n    });\n    var api = init(observer);\n    subscription = api ? __assign(__assign({}, subscription), api) : subscription;\n    if (observerCandidate.registerParent) {\n      observerCandidate.registerParent(subscription);\n    }\n    if (isComplete) subscription.stop();\n    return subscription;\n  };\n  return Action;\n}(Chainable);\nvar action = function action(init) {\n  return new Action({\n    init: init\n  });\n};\nvar BaseMulticast = /*#__PURE__*/function (_super) {\n  __extends(BaseMulticast, _super);\n  function BaseMulticast() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.subscribers = [];\n    return _this;\n  }\n  BaseMulticast.prototype.complete = function () {\n    this.subscribers.forEach(function (subscriber) {\n      return subscriber.complete();\n    });\n  };\n  BaseMulticast.prototype.error = function (err) {\n    this.subscribers.forEach(function (subscriber) {\n      return subscriber.error(err);\n    });\n  };\n  BaseMulticast.prototype.update = function (v) {\n    for (var i = 0; i < this.subscribers.length; i++) {\n      this.subscribers[i].update(v);\n    }\n  };\n  BaseMulticast.prototype.subscribe = function (observerCandidate) {\n    var _this = this;\n    var observer = createObserver(observerCandidate, this.props);\n    this.subscribers.push(observer);\n    var subscription = {\n      unsubscribe: function unsubscribe() {\n        var index = _this.subscribers.indexOf(observer);\n        if (index !== -1) _this.subscribers.splice(index, 1);\n      }\n    };\n    return subscription;\n  };\n  BaseMulticast.prototype.stop = function () {\n    if (this.parent) this.parent.stop();\n  };\n  BaseMulticast.prototype.registerParent = function (subscription) {\n    this.stop();\n    this.parent = subscription;\n  };\n  return BaseMulticast;\n}(Chainable);\nvar Multicast = /*#__PURE__*/function (_super) {\n  __extends(Multicast, _super);\n  function Multicast() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Multicast.prototype.create = function (props) {\n    return new Multicast(props);\n  };\n  return Multicast;\n}(BaseMulticast);\nvar multicast = function multicast() {\n  return new Multicast();\n};\nvar stepProgress = function stepProgress(steps, progress) {\n  var segment = 1 / (steps - 1);\n  var subsegment = 1 / (2 * (steps - 1));\n  var percentProgressOfTarget = Math.min(progress, 1);\n  var subsegmentProgressOfTarget = percentProgressOfTarget / subsegment;\n  var segmentProgressOfTarget = Math.floor((subsegmentProgressOfTarget + 1) / 2);\n  return segmentProgressOfTarget * segment;\n};\nvar calc = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  angle: angle,\n  degreesToRadians: degreesToRadians,\n  distance: distance,\n  isPoint3D: isPoint3D,\n  isPoint: isPoint,\n  dilate: mix,\n  getValueFromProgress: mix,\n  pointFromAngleAndDistance: pointFromVector,\n  getProgressFromValue: progress,\n  radiansToDegrees: radiansToDegrees,\n  smooth: smoothFrame,\n  speedPerFrame: velocityPerFrame,\n  speedPerSecond: velocityPerSecond,\n  stepProgress: stepProgress\n});\nvar isValueList = function isValueList(v) {\n  return Array.isArray(v);\n};\nvar isSingleValue = function isSingleValue(v) {\n  var typeOfV = typeof v;\n  return typeOfV === 'string' || typeOfV === 'number';\n};\nvar ValueReaction = /*#__PURE__*/function (_super) {\n  __extends(ValueReaction, _super);\n  function ValueReaction(props) {\n    var _this = _super.call(this, props) || this;\n    _this.scheduleVelocityCheck = function () {\n      return sync.postRender(_this.velocityCheck);\n    };\n    _this.velocityCheck = function (_a) {\n      var timestamp = _a.timestamp;\n      if (timestamp !== _this.lastUpdated) {\n        _this.prev = _this.current;\n      }\n    };\n    _this.prev = _this.current = props.value || 0;\n    if (isSingleValue(_this.current)) {\n      _this.updateCurrent = function (v) {\n        return _this.current = v;\n      };\n      _this.getVelocityOfCurrent = function () {\n        return _this.getSingleVelocity(_this.current, _this.prev);\n      };\n    } else if (isValueList(_this.current)) {\n      _this.updateCurrent = function (v) {\n        return _this.current = __spreadArrays(v);\n      };\n      _this.getVelocityOfCurrent = function () {\n        return _this.getListVelocity();\n      };\n    } else {\n      _this.updateCurrent = function (v) {\n        _this.current = {};\n        for (var key in v) {\n          if (v.hasOwnProperty(key)) {\n            _this.current[key] = v[key];\n          }\n        }\n      };\n      _this.getVelocityOfCurrent = function () {\n        return _this.getMapVelocity();\n      };\n    }\n    if (props.initialSubscription) _this.subscribe(props.initialSubscription);\n    return _this;\n  }\n  ValueReaction.prototype.create = function (props) {\n    return new ValueReaction(props);\n  };\n  ValueReaction.prototype.get = function () {\n    return this.current;\n  };\n  ValueReaction.prototype.getVelocity = function () {\n    return this.getVelocityOfCurrent();\n  };\n  ValueReaction.prototype.update = function (v) {\n    _super.prototype.update.call(this, v);\n    this.prev = this.current;\n    this.updateCurrent(v);\n    var _a = getFrameData(),\n      delta = _a.delta,\n      timestamp = _a.timestamp;\n    this.timeDelta = delta;\n    this.lastUpdated = timestamp;\n    sync.postRender(this.scheduleVelocityCheck);\n  };\n  ValueReaction.prototype.subscribe = function (observerCandidate) {\n    var sub = _super.prototype.subscribe.call(this, observerCandidate);\n    this.subscribers[this.subscribers.length - 1].update(this.current);\n    return sub;\n  };\n  ValueReaction.prototype.getSingleVelocity = function (current, prev) {\n    return typeof current === 'number' && typeof prev === 'number' ? velocityPerSecond(current - prev, this.timeDelta) : velocityPerSecond(parseFloat(current) - parseFloat(prev), this.timeDelta) || 0;\n  };\n  ValueReaction.prototype.getListVelocity = function () {\n    var _this = this;\n    return this.current.map(function (c, i) {\n      return _this.getSingleVelocity(c, _this.prev[i]);\n    });\n  };\n  ValueReaction.prototype.getMapVelocity = function () {\n    var velocity = {};\n    for (var key in this.current) {\n      if (this.current.hasOwnProperty(key)) {\n        velocity[key] = this.getSingleVelocity(this.current[key], this.prev[key]);\n      }\n    }\n    return velocity;\n  };\n  return ValueReaction;\n}(BaseMulticast);\nvar value = function value(_value, initialSubscription) {\n  return new ValueReaction({\n    value: _value,\n    initialSubscription: initialSubscription\n  });\n};\nvar multi = function multi(_a) {\n  var getCount = _a.getCount,\n    getFirst = _a.getFirst,\n    getOutput = _a.getOutput,\n    mapApi = _a.mapApi,\n    setProp = _a.setProp,\n    startActions = _a.startActions;\n  return function (actions) {\n    return action(function (_a) {\n      var update = _a.update,\n        _complete = _a.complete,\n        error = _a.error;\n      var numActions = getCount(actions);\n      var output = getOutput();\n      var updateOutput = function updateOutput() {\n        return update(output);\n      };\n      var numCompletedActions = 0;\n      var subs = startActions(actions, function (a, name) {\n        var hasCompleted = false;\n        return a.start({\n          complete: function complete() {\n            if (!hasCompleted) {\n              hasCompleted = true;\n              numCompletedActions++;\n              if (numCompletedActions === numActions) sync.update(_complete);\n            }\n          },\n          error: error,\n          update: function update(v) {\n            setProp(output, name, v);\n            sync.update(updateOutput, false, true);\n          }\n        });\n      });\n      return Object.keys(getFirst(subs)).reduce(function (api, methodName) {\n        api[methodName] = mapApi(subs, methodName);\n        return api;\n      }, {});\n    });\n  };\n};\nvar composite = /*#__PURE__*/multi({\n  getOutput: function getOutput() {\n    return {};\n  },\n  getCount: function getCount(subs) {\n    return Object.keys(subs).length;\n  },\n  getFirst: function getFirst(subs) {\n    return subs[Object.keys(subs)[0]];\n  },\n  mapApi: function mapApi(subs, methodName) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return Object.keys(subs).reduce(function (output, propKey) {\n        var _a;\n        if (subs[propKey][methodName]) {\n          args[0] && args[0][propKey] !== undefined ? output[propKey] = subs[propKey][methodName](args[0][propKey]) : output[propKey] = (_a = subs[propKey])[methodName].apply(_a, args);\n        }\n        return output;\n      }, {});\n    };\n  },\n  setProp: function setProp(output, name, v) {\n    return output[name] = v;\n  },\n  startActions: function startActions(actions, starter) {\n    return Object.keys(actions).reduce(function (subs, key) {\n      subs[key] = starter(actions[key], key);\n      return subs;\n    }, {});\n  }\n});\nvar parallel = /*#__PURE__*/multi({\n  getOutput: function getOutput() {\n    return [];\n  },\n  getCount: function getCount(subs) {\n    return subs.length;\n  },\n  getFirst: function getFirst(subs) {\n    return subs[0];\n  },\n  mapApi: function mapApi(subs, methodName) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return subs.map(function (sub, i) {\n        if (sub[methodName]) {\n          return Array.isArray(args[0]) ? sub[methodName](args[0][i]) : sub[methodName].apply(sub, args);\n        }\n      });\n    };\n  },\n  setProp: function setProp(output, name, v) {\n    return output[name] = v;\n  },\n  startActions: function startActions(actions, starter) {\n    return actions.map(function (action, i) {\n      return starter(action, i);\n    });\n  }\n});\nvar parallel$1 = function parallel$1() {\n  var actions = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    actions[_i] = arguments[_i];\n  }\n  return parallel(actions);\n};\nvar createVectorTests = function createVectorTests(typeTests) {\n  var testNames = Object.keys(typeTests);\n  var isVectorProp = function isVectorProp(prop, key) {\n    return prop !== undefined && !typeTests[key](prop);\n  };\n  var getVectorKeys = function getVectorKeys(props) {\n    return testNames.reduce(function (vectorKeys, key) {\n      if (isVectorProp(props[key], key)) vectorKeys.push(key);\n      return vectorKeys;\n    }, []);\n  };\n  var testVectorProps = function testVectorProps(props) {\n    return props && testNames.some(function (key) {\n      return isVectorProp(props[key], key);\n    });\n  };\n  return {\n    getVectorKeys: getVectorKeys,\n    testVectorProps: testVectorProps\n  };\n};\nvar unitTypes = [px, percent, degrees, vh, vw];\nvar findUnitType = function findUnitType(prop) {\n  return unitTypes.find(function (type) {\n    return type.test(prop);\n  });\n};\nvar isUnitProp = function isUnitProp(prop) {\n  return Boolean(findUnitType(prop));\n};\nvar createAction = function createAction(action, props) {\n  return action(props);\n};\nvar reduceArrayValue = function reduceArrayValue(i) {\n  return function (props, key) {\n    props[key] = props[key][i];\n    return props;\n  };\n};\nvar createArrayAction = function createArrayAction(action, props, vectorKeys) {\n  var firstVectorKey = vectorKeys[0];\n  var actionList = props[firstVectorKey].map(function (v, i) {\n    var childActionProps = vectorKeys.reduce(reduceArrayValue(i), __assign({}, props));\n    return getActionCreator(v)(action, childActionProps);\n  });\n  return parallel$1.apply(void 0, actionList);\n};\nvar reduceObjectValue = function reduceObjectValue(key) {\n  return function (props, propKey) {\n    props[propKey] = props[propKey][key];\n    return props;\n  };\n};\nvar createObjectAction = function createObjectAction(action, props, vectorKeys) {\n  var firstVectorKey = vectorKeys[0];\n  var actionMap = Object.keys(props[firstVectorKey]).reduce(function (map, key) {\n    var childActionProps = vectorKeys.reduce(reduceObjectValue(key), __assign({}, props));\n    map[key] = getActionCreator(props[firstVectorKey][key])(action, childActionProps);\n    return map;\n  }, {});\n  return composite(actionMap);\n};\nvar createUnitAction = function createUnitAction(action, _a) {\n  var from = _a.from,\n    to = _a.to,\n    props = __rest(_a, [\"from\", \"to\"]);\n  var unitType = findUnitType(from) || findUnitType(to);\n  var transform = unitType.transform,\n    parse = unitType.parse;\n  return action(__assign(__assign({}, props), {\n    from: typeof from === 'string' ? parse(from) : from,\n    to: typeof to === 'string' ? parse(to) : to\n  })).pipe(transform);\n};\nvar createMixerAction = function createMixerAction(mixer) {\n  return function (action, _a) {\n    var from = _a.from,\n      to = _a.to,\n      props = __rest(_a, [\"from\", \"to\"]);\n    return action(__assign(__assign({}, props), {\n      from: 0,\n      to: 1\n    })).pipe(mixer(from, to));\n  };\n};\nvar createColorAction = /*#__PURE__*/createMixerAction(mixColor);\nvar createComplexAction = /*#__PURE__*/createMixerAction(mixComplex);\nvar createVectorAction = function createVectorAction(action, typeTests) {\n  var _a = createVectorTests(typeTests),\n    testVectorProps = _a.testVectorProps,\n    getVectorKeys = _a.getVectorKeys;\n  var vectorAction = function vectorAction(props) {\n    var isVector = testVectorProps(props);\n    if (!isVector) return action(props);\n    var vectorKeys = getVectorKeys(props);\n    var testKey = vectorKeys[0];\n    var testProp = props[testKey];\n    return getActionCreator(testProp)(action, props, vectorKeys);\n  };\n  return vectorAction;\n};\nvar getActionCreator = function getActionCreator(prop) {\n  if (typeof prop === 'number') {\n    return createAction;\n  } else if (Array.isArray(prop)) {\n    return createArrayAction;\n  } else if (isUnitProp(prop)) {\n    return createUnitAction;\n  } else if (color.test(prop)) {\n    return createColorAction;\n  } else if (complex.test(prop)) {\n    return createComplexAction;\n  } else if (typeof prop === 'object') {\n    return createObjectAction;\n  } else {\n    return createAction;\n  }\n};\nvar decay = function decay(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  return action(function (_a) {\n    var complete = _a.complete,\n      update = _a.update;\n    var _b = props.velocity,\n      velocity = _b === void 0 ? 0 : _b,\n      _c = props.from,\n      from = _c === void 0 ? 0 : _c,\n      _d = props.power,\n      power = _d === void 0 ? 0.8 : _d,\n      _e = props.timeConstant,\n      timeConstant = _e === void 0 ? 350 : _e,\n      _f = props.restDelta,\n      restDelta = _f === void 0 ? 0.5 : _f,\n      modifyTarget = props.modifyTarget;\n    var elapsed = 0;\n    var amplitude = power * velocity;\n    var idealTarget = from + amplitude;\n    var target = typeof modifyTarget === 'undefined' ? idealTarget : modifyTarget(idealTarget);\n    if (target !== idealTarget) amplitude = target - from;\n    var process = sync.update(function (_a) {\n      var frameDelta = _a.delta;\n      elapsed += frameDelta;\n      var delta = -amplitude * Math.exp(-elapsed / timeConstant);\n      var isMoving = delta > restDelta || delta < -restDelta;\n      var current = isMoving ? target + delta : target;\n      update(current);\n      if (!isMoving) {\n        cancelSync.update(process);\n        complete();\n      }\n    }, true);\n    return {\n      stop: function stop() {\n        return cancelSync.update(process);\n      }\n    };\n  });\n};\nvar vectorDecay = /*#__PURE__*/createVectorAction(decay, {\n  from: number.test,\n  modifyTarget: function modifyTarget(func) {\n    return typeof func === 'function';\n  },\n  velocity: number.test\n});\nvar spring = function spring(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  return action(function (_a) {\n    var update = _a.update,\n      complete = _a.complete;\n    var _b = props.velocity,\n      velocity = _b === void 0 ? 0.0 : _b;\n    var _c = props.from,\n      from = _c === void 0 ? 0.0 : _c,\n      _d = props.to,\n      to = _d === void 0 ? 0.0 : _d,\n      _e = props.stiffness,\n      stiffness = _e === void 0 ? 100 : _e,\n      _f = props.damping,\n      damping = _f === void 0 ? 10 : _f,\n      _g = props.mass,\n      mass = _g === void 0 ? 1.0 : _g,\n      _h = props.restSpeed,\n      restSpeed = _h === void 0 ? 0.01 : _h,\n      _j = props.restDelta,\n      restDelta = _j === void 0 ? 0.01 : _j;\n    var initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    var t = 0;\n    var delta = to - from;\n    var position = from;\n    var prevPosition = position;\n    var process = sync.update(function (_a) {\n      var timeDelta = _a.delta;\n      t += timeDelta;\n      var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n      var angularFreq = Math.sqrt(stiffness / mass) / 1000;\n      prevPosition = position;\n      if (dampingRatio < 1) {\n        var envelope = Math.exp(-dampingRatio * angularFreq * t);\n        var expoDecay = angularFreq * Math.sqrt(1.0 - dampingRatio * dampingRatio);\n        position = to - envelope * ((initialVelocity + dampingRatio * angularFreq * delta) / expoDecay * Math.sin(expoDecay * t) + delta * Math.cos(expoDecay * t));\n      } else {\n        var envelope = Math.exp(-angularFreq * t);\n        position = to - envelope * (delta + (initialVelocity + angularFreq * delta) * t);\n      }\n      velocity = velocityPerSecond(position - prevPosition, timeDelta);\n      var isBelowVelocityThreshold = Math.abs(velocity) <= restSpeed;\n      var isBelowDisplacementThreshold = Math.abs(to - position) <= restDelta;\n      if (isBelowVelocityThreshold && isBelowDisplacementThreshold) {\n        position = to;\n        update(position);\n        cancelSync.update(process);\n        complete();\n      } else {\n        update(position);\n      }\n    }, true);\n    return {\n      stop: function stop() {\n        return cancelSync.update(process);\n      }\n    };\n  });\n};\nvar vectorSpring = /*#__PURE__*/createVectorAction(spring, {\n  from: number.test,\n  to: number.test,\n  stiffness: number.test,\n  damping: number.test,\n  mass: number.test,\n  velocity: number.test\n});\nvar inertia = function inertia(_a) {\n  var _b = _a.from,\n    from = _b === void 0 ? 0 : _b,\n    _c = _a.velocity,\n    velocity = _c === void 0 ? 0 : _c,\n    min = _a.min,\n    max = _a.max,\n    _d = _a.power,\n    power = _d === void 0 ? 0.8 : _d,\n    _e = _a.timeConstant,\n    timeConstant = _e === void 0 ? 700 : _e,\n    _f = _a.bounceStiffness,\n    bounceStiffness = _f === void 0 ? 500 : _f,\n    _g = _a.bounceDamping,\n    bounceDamping = _g === void 0 ? 10 : _g,\n    _h = _a.restDelta,\n    restDelta = _h === void 0 ? 1 : _h,\n    modifyTarget = _a.modifyTarget;\n  return action(function (_a) {\n    var update = _a.update,\n      _complete2 = _a.complete;\n    var prev = from;\n    var current = from;\n    var activeAnimation;\n    var isOutOfBounds = function isOutOfBounds(v) {\n      return min !== undefined && v < min || max !== undefined && v > max;\n    };\n    var boundaryNearest = function boundaryNearest(v) {\n      return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    var startAnimation = function startAnimation(animation, next) {\n      activeAnimation && activeAnimation.stop();\n      activeAnimation = animation.start({\n        update: update,\n        complete: function complete() {\n          if (next) {\n            next();\n            return;\n          }\n          _complete2();\n        }\n      });\n    };\n    var startSpring = function startSpring(props) {\n      startAnimation(spring(__assign(__assign({}, props), {\n        stiffness: bounceStiffness,\n        damping: bounceDamping,\n        restDelta: restDelta\n      })));\n    };\n    if (isOutOfBounds(from)) {\n      startSpring({\n        from: from,\n        velocity: velocity,\n        to: boundaryNearest(from)\n      });\n    } else {\n      var to = power * velocity + from;\n      if (typeof modifyTarget !== 'undefined') {\n        to = modifyTarget(to);\n        modifyTarget = void 0;\n        velocity = (to - from) / power;\n      }\n      var animation = decay({\n        from: from,\n        velocity: velocity,\n        timeConstant: timeConstant,\n        power: power,\n        restDelta: restDelta,\n        modifyTarget: modifyTarget\n      });\n      var next = void 0;\n      if (isOutOfBounds(to)) {\n        var boundary_1 = boundaryNearest(to);\n        var heading_1 = boundary_1 == min ? -1 : 1;\n        animation = animation.while(function (v) {\n          prev = current;\n          velocity = velocityPerSecond(v - prev, getFrameData().delta);\n          current = v;\n          return boundary_1 - v * heading_1 > 0;\n        });\n        next = function next() {\n          return startSpring({\n            from: current,\n            to: boundary_1,\n            velocity: velocity\n          });\n        };\n      }\n      startAnimation(animation, next);\n    }\n    return {\n      stop: function stop() {\n        return activeAnimation && activeAnimation.stop();\n      }\n    };\n  });\n};\nvar index = /*#__PURE__*/createVectorAction(inertia, {\n  from: number.test,\n  velocity: number.test,\n  min: number.test,\n  max: number.test,\n  damping: number.test,\n  stiffness: number.test,\n  modifyTarget: function modifyTarget(func) {\n    return typeof func === 'function';\n  }\n});\nvar frame = function frame() {\n  return action(function (_a) {\n    var update = _a.update;\n    var initialTime = 0;\n    var process = sync.update(function (_a) {\n      var timestamp = _a.timestamp;\n      if (!initialTime) initialTime = timestamp;\n      update(timestamp - initialTime);\n    }, true, true);\n    return {\n      stop: function stop() {\n        return cancelSync.update(process);\n      }\n    };\n  });\n};\nvar scrubber = function scrubber(_a) {\n  var _b = _a.from,\n    from = _b === void 0 ? 0 : _b,\n    _c = _a.to,\n    to = _c === void 0 ? 1 : _c,\n    _d = _a.ease,\n    ease = _d === void 0 ? linear : _d,\n    _e = _a.reverseEase,\n    reverseEase = _e === void 0 ? false : _e;\n  if (reverseEase) {\n    ease = createReversedEasing(ease);\n  }\n  return action(function (_a) {\n    var update = _a.update;\n    return {\n      seek: function seek(progress) {\n        return update(progress);\n      }\n    };\n  }).pipe(ease, function (v) {\n    return mix(from, to, v);\n  });\n};\nvar vectorScrubber = /*#__PURE__*/createVectorAction(scrubber, {\n  ease: function ease(func) {\n    return typeof func === 'function';\n  },\n  from: number.test,\n  to: number.test\n});\nvar clampProgress = /*#__PURE__*/clamp(0, 1);\nvar tween = function tween(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  return action(function (_a) {\n    var update = _a.update,\n      complete = _a.complete;\n    var _b = props.duration,\n      duration = _b === void 0 ? 300 : _b,\n      _c = props.ease,\n      ease = _c === void 0 ? easeOut : _c,\n      _d = props.flip,\n      flip = _d === void 0 ? 0 : _d,\n      _e = props.loop,\n      loop = _e === void 0 ? 0 : _e,\n      _f = props.yoyo,\n      yoyo = _f === void 0 ? 0 : _f,\n      _g = props.repeatDelay,\n      repeatDelay = _g === void 0 ? 0 : _g;\n    var _h = props.from,\n      from = _h === void 0 ? 0 : _h,\n      _j = props.to,\n      to = _j === void 0 ? 1 : _j,\n      _k = props.elapsed,\n      elapsed = _k === void 0 ? 0 : _k,\n      _l = props.flipCount,\n      flipCount = _l === void 0 ? 0 : _l,\n      _m = props.yoyoCount,\n      yoyoCount = _m === void 0 ? 0 : _m,\n      _o = props.loopCount,\n      loopCount = _o === void 0 ? 0 : _o;\n    var playhead = vectorScrubber({\n      from: from,\n      to: to,\n      ease: ease\n    }).start(update);\n    var currentProgress = 0;\n    var process;\n    var _isActive = false;\n    var reverseAnimation = function reverseAnimation(reverseEase) {\n      var _a;\n      if (reverseEase === void 0) {\n        reverseEase = false;\n      }\n      _a = [to, from], from = _a[0], to = _a[1];\n      playhead = vectorScrubber({\n        from: from,\n        to: to,\n        ease: ease,\n        reverseEase: reverseEase\n      }).start(update);\n    };\n    var isTweenComplete = function isTweenComplete() {\n      var isComplete = _isActive && elapsed > duration + repeatDelay;\n      if (!isComplete) return false;\n      if (isComplete && !loop && !flip && !yoyo) return true;\n      elapsed = duration - (elapsed - repeatDelay);\n      if (loop && loopCount < loop) {\n        loopCount++;\n        return false;\n      } else if (flip && flipCount < flip) {\n        flipCount++;\n        reverseAnimation();\n        return false;\n      } else if (yoyo && yoyoCount < yoyo) {\n        yoyoCount++;\n        reverseAnimation(yoyoCount % 2 !== 0);\n        return false;\n      }\n      return true;\n    };\n    var updateTween = function updateTween() {\n      currentProgress = clampProgress(progress(0, duration, elapsed));\n      playhead.seek(currentProgress);\n    };\n    var startTimer = function startTimer() {\n      _isActive = true;\n      process = sync.update(function (_a) {\n        var delta = _a.delta;\n        elapsed += delta;\n        updateTween();\n        if (isTweenComplete()) {\n          cancelSync.update(process);\n          complete && sync.update(complete, false, true);\n        }\n      }, true);\n    };\n    var stopTimer = function stopTimer() {\n      _isActive = false;\n      if (process) cancelSync.update(process);\n    };\n    startTimer();\n    return {\n      isActive: function isActive() {\n        return _isActive;\n      },\n      getElapsed: function getElapsed() {\n        return clamp(0, duration, elapsed);\n      },\n      getProgress: function getProgress() {\n        return currentProgress;\n      },\n      stop: function stop() {\n        stopTimer();\n      },\n      pause: function pause() {\n        stopTimer();\n        return this;\n      },\n      resume: function resume() {\n        if (!_isActive) startTimer();\n        return this;\n      },\n      seek: function seek(newProgress) {\n        elapsed = mix(0, duration, newProgress);\n        sync.update(updateTween, false, true);\n        return this;\n      },\n      reverse: function reverse() {\n        reverseAnimation();\n        return this;\n      }\n    };\n  });\n};\nvar clampProgress$1 = /*#__PURE__*/clamp(0, 1);\nvar defaultEasings = function defaultEasings(values, easing) {\n  return values.map(function () {\n    return easing || easeOut;\n  }).splice(0, values.length - 1);\n};\nvar defaultTimings = function defaultTimings(values) {\n  var numValues = values.length;\n  return values.map(function (value, i) {\n    return i !== 0 ? i / (numValues - 1) : 0;\n  });\n};\nvar interpolateScrubbers = function interpolateScrubbers(input, scrubbers, update) {\n  var rangeLength = input.length;\n  var finalInputIndex = rangeLength - 1;\n  var finalScrubberIndex = finalInputIndex - 1;\n  var subs = scrubbers.map(function (scrub) {\n    return scrub.start(update);\n  });\n  return function (v) {\n    if (v <= input[0]) {\n      subs[0].seek(0);\n    }\n    if (v >= input[finalInputIndex]) {\n      subs[finalScrubberIndex].seek(1);\n    }\n    var i = 1;\n    for (; i < rangeLength; i++) {\n      if (input[i] > v || i === finalInputIndex) break;\n    }\n    var progressInRange = progress(input[i - 1], input[i], v);\n    subs[i - 1].seek(clampProgress$1(progressInRange));\n  };\n};\nvar keyframes = function keyframes(_a) {\n  var easings = _a.easings,\n    _b = _a.ease,\n    ease = _b === void 0 ? linear : _b,\n    times = _a.times,\n    values = _a.values,\n    tweenProps = __rest(_a, [\"easings\", \"ease\", \"times\", \"values\"]);\n  easings = Array.isArray(easings) ? easings : defaultEasings(values, easings);\n  times = times || defaultTimings(values);\n  var scrubbers = easings.map(function (easing, i) {\n    return vectorScrubber({\n      from: values[i],\n      to: values[i + 1],\n      ease: easing\n    });\n  });\n  return tween(__assign(__assign({}, tweenProps), {\n    ease: ease\n  })).applyMiddleware(function (update) {\n    return interpolateScrubbers(times, scrubbers, update);\n  });\n};\nvar physics = function physics(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  return action(function (_a) {\n    var complete = _a.complete,\n      update = _a.update;\n    var _b = props.acceleration,\n      acceleration = _b === void 0 ? 0 : _b,\n      _c = props.friction,\n      friction = _c === void 0 ? 0 : _c,\n      _d = props.velocity,\n      velocity = _d === void 0 ? 0 : _d,\n      springStrength = props.springStrength,\n      to = props.to;\n    var _e = props.restSpeed,\n      restSpeed = _e === void 0 ? 0.001 : _e,\n      _f = props.from,\n      from = _f === void 0 ? 0 : _f;\n    var current = from;\n    var process = sync.update(function (_a) {\n      var delta = _a.delta;\n      var elapsed = Math.max(delta, 16);\n      if (acceleration) velocity += velocityPerFrame(acceleration, elapsed);\n      if (friction) velocity *= Math.pow(1 - friction, elapsed / 100);\n      if (springStrength !== undefined && to !== undefined) {\n        var distanceToTarget = to - current;\n        velocity += distanceToTarget * velocityPerFrame(springStrength, elapsed);\n      }\n      current += velocityPerFrame(velocity, elapsed);\n      update(current);\n      var isComplete = restSpeed !== false && (!velocity || Math.abs(velocity) <= restSpeed);\n      if (isComplete) {\n        cancelSync.update(process);\n        complete();\n      }\n    }, true);\n    return {\n      set: function set(v) {\n        current = v;\n        return this;\n      },\n      setAcceleration: function setAcceleration(v) {\n        acceleration = v;\n        return this;\n      },\n      setFriction: function setFriction(v) {\n        friction = v;\n        return this;\n      },\n      setSpringStrength: function setSpringStrength(v) {\n        springStrength = v;\n        return this;\n      },\n      setSpringTarget: function setSpringTarget(v) {\n        to = v;\n        return this;\n      },\n      setVelocity: function setVelocity(v) {\n        velocity = v;\n        return this;\n      },\n      stop: function stop() {\n        return cancelSync.update(process);\n      }\n    };\n  });\n};\nvar vectorPhysics = /*#__PURE__*/createVectorAction(physics, {\n  acceleration: number.test,\n  friction: number.test,\n  velocity: number.test,\n  from: number.test,\n  to: number.test,\n  springStrength: number.test\n});\nvar DEFAULT_DURATION = 300;\nvar flattenTimings = function flattenTimings(instructions) {\n  var flatInstructions = [];\n  var lastArg = instructions[instructions.length - 1];\n  var isStaggered = typeof lastArg === 'number';\n  var staggerDelay = isStaggered ? lastArg : 0;\n  var segments = isStaggered ? instructions.slice(0, -1) : instructions;\n  var numSegments = segments.length;\n  var offset = 0;\n  segments.forEach(function (item, i) {\n    flatInstructions.push(item);\n    if (i !== numSegments - 1) {\n      var duration = item.duration || DEFAULT_DURATION;\n      offset = staggerDelay;\n      flatInstructions.push(\"\" + (offset - duration));\n    }\n  });\n  return flatInstructions;\n};\nvar flattenArrayInstructions = function flattenArrayInstructions(instructions, instruction) {\n  Array.isArray(instruction) ? instructions.push.apply(instructions, flattenTimings(instruction)) : instructions.push(instruction);\n  return instructions;\n};\nvar convertDefToProps = function convertDefToProps(props, def, i) {\n  var duration = props.duration,\n    easings = props.easings,\n    times = props.times,\n    values = props.values;\n  var numValues = values.length;\n  var prevTimeTo = times[numValues - 1];\n  var timeFrom = def.at === 0 ? 0 : def.at / duration;\n  var timeTo = (def.at + def.duration) / duration;\n  if (i === 0) {\n    values.push(def.from);\n    times.push(timeFrom);\n  } else {\n    if (prevTimeTo !== timeFrom) {\n      if (def.from !== undefined) {\n        values.push(values[numValues - 1]);\n        times.push(timeFrom);\n        easings.push(linear);\n      }\n      var from = def.from !== undefined ? def.from : values[numValues - 1];\n      values.push(from);\n      times.push(timeFrom);\n      easings.push(linear);\n    } else if (def.from !== undefined) {\n      values.push(def.from);\n      times.push(timeFrom);\n      easings.push(linear);\n    }\n  }\n  values.push(def.to);\n  times.push(timeTo);\n  easings.push(def.ease || easeInOut);\n  return props;\n};\nvar timeline = function timeline(instructions, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    duration = _b.duration,\n    elapsed = _b.elapsed,\n    ease = _b.ease,\n    loop = _b.loop,\n    flip = _b.flip,\n    yoyo = _b.yoyo;\n  var playhead = 0;\n  var calculatedDuration = 0;\n  var flatInstructions = instructions.reduce(flattenArrayInstructions, []);\n  var animationDefs = [];\n  flatInstructions.forEach(function (instruction) {\n    if (typeof instruction === 'string') {\n      playhead += parseFloat(instruction);\n    } else if (typeof instruction === 'number') {\n      playhead = instruction;\n    } else {\n      var def = __assign(__assign({}, instruction), {\n        at: playhead\n      });\n      def.duration = def.duration === undefined ? DEFAULT_DURATION : def.duration;\n      animationDefs.push(def);\n      playhead += def.duration;\n      calculatedDuration = Math.max(calculatedDuration, def.at + def.duration);\n    }\n  });\n  var tracks = {};\n  var numDefs = animationDefs.length;\n  for (var i = 0; i < numDefs; i++) {\n    var def = animationDefs[i];\n    var track = def.track;\n    if (track === undefined) {\n      throw new Error('No track defined');\n    }\n    if (!tracks.hasOwnProperty(track)) tracks[track] = [];\n    tracks[track].push(def);\n  }\n  var trackKeyframes = {};\n  for (var key in tracks) {\n    if (tracks.hasOwnProperty(key)) {\n      var keyframeProps = tracks[key].reduce(convertDefToProps, {\n        duration: calculatedDuration,\n        easings: [],\n        times: [],\n        values: []\n      });\n      trackKeyframes[key] = keyframes(__assign(__assign({}, keyframeProps), {\n        duration: duration || calculatedDuration,\n        ease: ease,\n        elapsed: elapsed,\n        loop: loop,\n        yoyo: yoyo,\n        flip: flip\n      }));\n    }\n  }\n  return composite(trackKeyframes);\n};\nvar listen = function listen(element, events, options) {\n  return action(function (_a) {\n    var update = _a.update;\n    var eventNames = events.split(' ').map(function (eventName) {\n      element.addEventListener(eventName, update, options);\n      return eventName;\n    });\n    return {\n      stop: function stop() {\n        return eventNames.forEach(function (eventName) {\n          return element.removeEventListener(eventName, update, options);\n        });\n      }\n    };\n  });\n};\nvar defaultPointerPos = function defaultPointerPos() {\n  return {\n    clientX: 0,\n    clientY: 0,\n    pageX: 0,\n    pageY: 0,\n    x: 0,\n    y: 0\n  };\n};\nvar eventToPoint = function eventToPoint(e, point) {\n  if (point === void 0) {\n    point = defaultPointerPos();\n  }\n  point.clientX = point.x = e.clientX;\n  point.clientY = point.y = e.clientY;\n  point.pageX = e.pageX;\n  point.pageY = e.pageY;\n  return point;\n};\nvar points = [/*#__PURE__*/defaultPointerPos()];\nvar isTouchDevice = false;\nif (typeof document !== 'undefined') {\n  var updatePointsLocation = function updatePointsLocation(_a) {\n    var touches = _a.touches;\n    isTouchDevice = true;\n    var numTouches = touches.length;\n    points.length = 0;\n    for (var i = 0; i < numTouches; i++) {\n      var thisTouch = touches[i];\n      points.push(eventToPoint(thisTouch));\n    }\n  };\n  listen(document, 'touchstart touchmove', {\n    passive: true,\n    capture: true\n  }).start(updatePointsLocation);\n}\nvar multitouch = function multitouch(_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.preventDefault,\n    preventDefault = _c === void 0 ? true : _c,\n    _d = _b.scale,\n    scale = _d === void 0 ? 1.0 : _d,\n    _e = _b.rotate,\n    rotate = _e === void 0 ? 0.0 : _e;\n  return action(function (_a) {\n    var update = _a.update;\n    var output = {\n      touches: points,\n      scale: scale,\n      rotate: rotate\n    };\n    var initialDistance = 0.0;\n    var initialRotation = 0.0;\n    var isGesture = points.length > 1;\n    if (isGesture) {\n      var firstTouch = points[0],\n        secondTouch = points[1];\n      initialDistance = distance(firstTouch, secondTouch);\n      initialRotation = angle(firstTouch, secondTouch);\n    }\n    var updatePoint = function updatePoint() {\n      if (isGesture) {\n        var firstTouch = points[0],\n          secondTouch = points[1];\n        var newDistance = distance(firstTouch, secondTouch);\n        var newRotation = angle(firstTouch, secondTouch);\n        output.scale = scale * (newDistance / initialDistance);\n        output.rotate = rotate + (newRotation - initialRotation);\n      }\n      update(output);\n    };\n    var onMove = function onMove(e) {\n      if (preventDefault || e.touches.length > 1) e.preventDefault();\n      sync.update(updatePoint);\n    };\n    var updateOnMove = listen(document, 'touchmove', {\n      passive: !preventDefault\n    }).start(onMove);\n    if (isTouchDevice) sync.update(updatePoint);\n    return {\n      stop: function stop() {\n        cancelSync.update(updatePoint);\n        updateOnMove.stop();\n      }\n    };\n  });\n};\nvar getIsTouchDevice = function getIsTouchDevice() {\n  return isTouchDevice;\n};\nvar point = /*#__PURE__*/defaultPointerPos();\nvar isMouseDevice = false;\nif (typeof document !== 'undefined') {\n  var updatePointLocation = function updatePointLocation(e) {\n    isMouseDevice = true;\n    eventToPoint(e, point);\n  };\n  listen(document, 'mousedown mousemove', true).start(updatePointLocation);\n}\nvar mouse = function mouse(_a) {\n  var _b = (_a === void 0 ? {} : _a).preventDefault,\n    preventDefault = _b === void 0 ? true : _b;\n  return action(function (_a) {\n    var update = _a.update;\n    var updatePoint = function updatePoint() {\n      return update(point);\n    };\n    var onMove = function onMove(e) {\n      if (preventDefault) e.preventDefault();\n      sync.update(updatePoint);\n    };\n    var updateOnMove = listen(document, 'mousemove').start(onMove);\n    if (isMouseDevice) sync.update(updatePoint);\n    return {\n      stop: function stop() {\n        cancelSync.update(updatePoint);\n        updateOnMove.stop();\n      }\n    };\n  });\n};\nvar getFirstTouch = function getFirstTouch(_a) {\n  var firstTouch = _a[0];\n  return firstTouch;\n};\nvar pointer = function pointer(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  return getIsTouchDevice() ? multitouch(props).pipe(function (_a) {\n    var touches = _a.touches;\n    return touches;\n  }, getFirstTouch) : mouse(props);\n};\nvar index$1 = function index$1(_a) {\n  if (_a === void 0) {\n    _a = {};\n  }\n  var x = _a.x,\n    y = _a.y,\n    props = __rest(_a, [\"x\", \"y\"]);\n  if (x !== undefined || y !== undefined) {\n    var applyXOffset_1 = applyOffset(x || 0);\n    var applyYOffset_1 = applyOffset(y || 0);\n    var delta_1 = {\n      x: 0,\n      y: 0\n    };\n    return pointer(props).pipe(function (point) {\n      delta_1.x = applyXOffset_1(point.x);\n      delta_1.y = applyYOffset_1(point.y);\n      return delta_1;\n    });\n  } else {\n    return pointer(props);\n  }\n};\nvar chain = function chain() {\n  var actions = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    actions[_i] = arguments[_i];\n  }\n  return action(function (_a) {\n    var update = _a.update,\n      _complete3 = _a.complete;\n    var i = 0;\n    var current;\n    var playCurrent = function playCurrent() {\n      current = actions[i].start({\n        complete: function complete() {\n          i++;\n          i >= actions.length ? _complete3() : playCurrent();\n        },\n        update: update\n      });\n    };\n    playCurrent();\n    return {\n      stop: function stop() {\n        return current && current.stop();\n      }\n    };\n  });\n};\nvar crossfade = function crossfade(a, b) {\n  return action(function (observer) {\n    var balance = 0;\n    var fadable = parallel$1(a, b).start(__assign(__assign({}, observer), {\n      update: function update(_a) {\n        var va = _a[0],\n          vb = _a[1];\n        observer.update(mix(va, vb, balance));\n      }\n    }));\n    return {\n      setBalance: function setBalance(v) {\n        return balance = v;\n      },\n      stop: function stop() {\n        return fadable.stop();\n      }\n    };\n  });\n};\nvar delay = function delay(timeToDelay) {\n  return action(function (_a) {\n    var complete = _a.complete;\n    var timeout = setTimeout(complete, timeToDelay);\n    return {\n      stop: function stop() {\n        return clearTimeout(timeout);\n      }\n    };\n  });\n};\nvar merge = function merge() {\n  var actions = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    actions[_i] = arguments[_i];\n  }\n  return action(function (observer) {\n    var subs = actions.map(function (thisAction) {\n      return thisAction.start(observer);\n    });\n    return {\n      stop: function stop() {\n        return subs.forEach(function (sub) {\n          return sub.stop();\n        });\n      }\n    };\n  });\n};\nvar schedule = function schedule(scheduler, schedulee) {\n  return action(function (_a) {\n    var _update = _a.update,\n      complete = _a.complete;\n    var latest;\n    var schedulerSub = scheduler.start({\n      update: function update() {\n        return latest !== undefined && _update(latest);\n      },\n      complete: complete\n    });\n    var scheduleeSub = schedulee.start({\n      update: function update(v) {\n        return latest = v;\n      },\n      complete: complete\n    });\n    return {\n      stop: function stop() {\n        schedulerSub.stop();\n        scheduleeSub.stop();\n      }\n    };\n  });\n};\nvar stagger = function stagger(actions, interval) {\n  var intervalIsNumber = typeof interval === 'number';\n  var actionsWithDelay = actions.map(function (a, i) {\n    var timeToDelay = intervalIsNumber ? interval * i : interval(i);\n    return chain(delay(timeToDelay), a);\n  });\n  return parallel$1.apply(void 0, actionsWithDelay);\n};\nvar appendUnit = function appendUnit(unit) {\n  return function (v) {\n    return \"\" + v + unit;\n  };\n};\nvar steps = function steps(st, min, max) {\n  if (min === void 0) {\n    min = 0;\n  }\n  if (max === void 0) {\n    max = 1;\n  }\n  return function (v) {\n    var current = progress(min, max, v);\n    return mix(min, max, stepProgress(st, current));\n  };\n};\nvar transformMap = function transformMap(childTransformers) {\n  return function (v) {\n    var output = __assign({}, v);\n    for (var key in childTransformers) {\n      if (childTransformers.hasOwnProperty(key)) {\n        var childTransformer = childTransformers[key];\n        output[key] = childTransformer(v[key]);\n      }\n    }\n    return output;\n  };\n};\nvar transformers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  applyOffset: applyOffset,\n  clamp: clamp,\n  conditional: conditional,\n  interpolate: interpolate,\n  blendArray: mixArray,\n  blendColor: mixColor,\n  pipe: pipe,\n  smooth: smooth,\n  snap: snap,\n  generateStaticSpring: springForce,\n  nonlinearSpring: springForceExpo,\n  linearSpring: springForceLinear,\n  wrap: wrap,\n  appendUnit: appendUnit,\n  steps: steps,\n  transformMap: transformMap\n});\nvar css = function css(element, props) {\n  warning(false, 'css() is deprecated, use styler instead');\n  return styler(element, props);\n};\nvar svg = function svg(element, props) {\n  warning(false, 'svg() is deprecated, use styler instead');\n  return styler(element, props);\n};\nexport { Action, ValueReaction, action, calc, chain, composite, crossfade, css, vectorDecay as decay, delay, frame as everyFrame, index as inertia, keyframes, listen, merge, mouse, multicast, multitouch, parallel$1 as parallel, vectorPhysics as physics, index$1 as pointer, schedule, vectorSpring as spring, stagger, svg, timeline, transformers as transform, tween, value };","map":null,"metadata":{},"sourceType":"module"}