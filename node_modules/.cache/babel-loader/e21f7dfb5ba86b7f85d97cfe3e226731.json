{"ast":null,"code":"import _classCallCheck from \"/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/src/pages/modules/budget/Plaid.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Modal, Button } from 'antd';\nimport ROLES from 'constants/roles';\nimport PlaidLink from \"react-plaid-link\";\nimport axios from \"axios\";\nimport Report from 'components/Report';\nimport Config from 'Config';\nimport { plaidLogin } from 'redux/actions';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { QL_PLAID_ACCOUNT_ADD, QL_PLAID_INCOME_ADD, QL_PLAID_INVESTMENT_ADD, QL_PLAID_ITEM_ADD } from '../../../constants/queries';\nvar fnMutationPlaidAccountAdd = null;\nvar fnMutationPlaidIncomeAdd = null;\nvar fnMutationPlaidInvestmentAdd = null;\nvar fnMutationPlaidItemAdd = null;\nfunction HiddenHook() {\n  var _useMutation = useMutation(QL_PLAID_ACCOUNT_ADD);\n  var _useMutation2 = _slicedToArray(_useMutation, 1);\n  fnMutationPlaidAccountAdd = _useMutation2[0];\n  var _useMutation3 = useMutation(QL_PLAID_INCOME_ADD);\n  var _useMutation4 = _slicedToArray(_useMutation3, 1);\n  fnMutationPlaidIncomeAdd = _useMutation4[0];\n  var _useMutation5 = useMutation(QL_PLAID_INVESTMENT_ADD);\n  var _useMutation6 = _slicedToArray(_useMutation5, 1);\n  fnMutationPlaidInvestmentAdd = _useMutation6[0];\n  var _useMutation7 = useMutation(QL_PLAID_ITEM_ADD);\n  var _useMutation8 = _slicedToArray(_useMutation7, 1);\n  fnMutationPlaidItemAdd = _useMutation8[0];\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  });\n}\nvar PLAID = {\n  IMPORT_TRANSACTION: 'PLAID_IMPORT_TRANSACTION',\n  IMPORT_ACCOUNT: 'PLAID_IMPORT_ACCOUNT',\n  IMPORT_INCOME: 'PLAID_IMPORT_INCOME',\n  IMPORT_INVESTMENT: 'PLAID_IMPORT_INVESTMENT',\n  IMPORT_ITEM: 'PLAID_IMPORT_ITEM',\n  IMPORT_BALANCE: 'PLAID_IMPORT_BALANCE'\n};\nvar Plaid = /*#__PURE__*/function (_Component) {\n  _inherits(Plaid, _Component);\n  function Plaid() {\n    var _this;\n    _classCallCheck(this, Plaid);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Plaid).call(this));\n    _this.state = {\n      reports: {\n        reportData: [],\n        reportCols: {},\n        reportTitle: ''\n      },\n      dataLoaded: false\n    };\n    _this.handleOnSuccess = _this.handleOnSuccess.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnExit = _this.handleOnExit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getTransactions = _this.getTransactions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getIncome = _this.getIncome.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getBalance = _this.getBalance.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getAssets = _this.getAssets.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getInvestments = _this.getInvestments.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getLiabilities = _this.getLiabilities.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fnImportPlaid = _this.fnImportPlaid.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fnImportAccounts = _this.fnImportAccounts.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(Plaid, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"fnImportAccounts\",\n    value: function fnImportAccounts() {\n      var _this2 = this;\n      axios.get(Config.backend_server + \"/plaid/accounts\").then(function (res) {\n        var accounts = res.data['accounts'];\n        console.log('accounts:', accounts);\n        var varQL = null;\n        for (var index = 0; index < accounts.length; index++) {\n          varQL = {\n            accountId: '' + _this2.props.user.id,\n            plaidAccount: {\n              uuid: accounts[index]['account_id'],\n              balances: {\n                available: accounts[index]['balances']['available'],\n                current: accounts[index]['balances']['current'],\n                iso_currency_code: accounts[index]['balances']['iso_currency_code'],\n                limit: accounts[index]['balances']['limit'],\n                unofficial_currency_code: accounts[index]['balances']['unofficial_currency_code']\n              },\n              mask: accounts[index]['mask'],\n              name: accounts[index]['name'],\n              officialName: accounts[index]['offical_name'],\n              subtype: accounts[index]['subtype'],\n              plaidAccountType: accounts[index]['type']\n            }\n          };\n          console.log('varQL:', varQL);\n          fnMutationPlaidAccountAdd({\n            variables: {\n              data: varQL\n            }\n          }).then(function (response) {});\n        }\n      });\n    }\n  }, {\n    key: \"fnImportPlaid\",\n    value: function fnImportPlaid(plaidImportType, data) {\n      console.log(plaidImportType, data);\n      var varQL = null;\n      switch (plaidImportType) {\n        case PLAID.IMPORT_TRANSACTION:\n          break;\n        case PLAID.IMPORT_ACCOUNT:\n          // varQL = {\n\n          // }\n          // fnMutationPlaidAccountAdd(this.props.user.id, { variables: { data: varQL } }).then((response) => {\n          // });\n          break;\n        case PLAID.IMPORT_INCOME:\n          varQL = {\n            accountId: '' + this.props.user.id,\n            plaidIncome: {\n              // incomeStreams: \n              lastYearIncome: data.raw.last_year_income,\n              lastYearIncomeBeforeTax: data.raw.last_year_income_before_tax,\n              maxNumberOfOverlappingIncomeStreams: data.raw.max_number_of_overlapping_income_streams,\n              numberOfIncomeStreams: data.raw.number_of_income_streams,\n              projectedYearlyIncome: data.raw.projected_yearly_income,\n              projectedYearlyIncomeBeforeTax: data.raw.projected_yearly_income_before_tax\n            }\n          };\n          console.log('varQL:', varQL);\n          fnMutationPlaidIncomeAdd({\n            variables: {\n              data: varQL\n            }\n          }).then(function (response) {});\n          break;\n        case PLAID.IMPORT_INVESTMENT:\n          varQL = {\n            accountId: '' + this.props.user.id,\n            plaidInvestment: {\n              uuid: data.raw.account_id,\n              amount: data.raw.amount,\n              cancelTransactionId: data.raw.cancel_transaction_id,\n              date: data.raw.date,\n              fees: data.raw.fees,\n              investmentTransactionId: data.raw.investment_transaction_id,\n              isoCurrencyCode: data.raw.iso_currency_code,\n              name: data.raw.name,\n              price: data.raw.price,\n              quantity: data.raw.quantity,\n              securityId: data.raw.security_id,\n              investmentType: data.raw.type,\n              // investmentType: data.raw.subtype,\n              unofficialCurrencyCode: data.raw.unofficial_currency_code\n            }\n          };\n          console.log('varQL:', varQL);\n          fnMutationPlaidInvestmentAdd({\n            variables: {\n              data: varQL\n            }\n          }).then(function (response) {});\n          break;\n        case PLAID.IMPORT_ITEM:\n          // fnMutationPlaidItemAdd(this.props.user.id, { variables: { data: varQL } }).then((response) => {\n          // });\n          break;\n        case PLAID.IMPORT_BALANCE:\n          break;\n      }\n    }\n  }, {\n    key: \"handleOnSuccess\",\n    value: function handleOnSuccess(public_token, metadata) {\n      // send token to client server\n\n      window.localStorage.setItem('plaid_connected', true);\n      window.localStorage.setItem('plaid_public_token', public_token);\n      this.props.plaidLogin(true, public_token);\n      var instance = this;\n      axios.post(Config.backend_server + \"/plaid/auth/public_token\", {\n        public_token: public_token\n      }).then(function (resp) {\n        instance.fnImportAccounts();\n      });\n    }\n  }, {\n    key: \"handleOnExit\",\n    value: function handleOnExit() {\n      // handle the case when your user exits Link\n      // For the sake of this tutorial, we're not going to be doing anything here.\n    }\n  }, {\n    key: \"getTransactions\",\n    value: function getTransactions() {\n      var _this3 = this;\n      axios.get(Config.backend_server + \"/plaid/transactions\").then(function (res) {\n        var cols = [{\n          title: 'Date',\n          dataIndex: 'date',\n          key: 'date'\n        }, {\n          title: 'Category',\n          dataIndex: 'category',\n          key: 'category'\n        }, {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name'\n        }, {\n          title: 'Amount',\n          dataIndex: 'amount',\n          key: 'amount'\n        }, {\n          title: '',\n          key: 'id',\n          render: function render(record) {\n            if (_this3.props.user.role != ROLES.VIEW_ONLY) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                className: \"report-action-btn report-action-btn--view\",\n                onClick: function onClick() {\n                  return _this3.fnImportPlaid(PLAID.IMPORT_TRANSACTION, record);\n                },\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 37\n                }\n              }, \"Import\"));\n            } else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 33\n                }\n              });\n            }\n          }\n        }];\n        var reports = [];\n        if (res.data.hasOwnProperty('transactions')) {\n          var accounts = res.data['accounts'];\n          var transactions = res.data['transactions'];\n          for (var aindex = 0; aindex < accounts.length; aindex++) {\n            var account_id = accounts[aindex]['account_id'];\n            var filterTransactions = [];\n            for (var index = 0; index < transactions.length; index++) {\n              if (transactions[index]['account_id'] == account_id) {\n                var category = '';\n                for (var cindex = 0; cindex < transactions[index]['category'].length; cindex++) {\n                  if (cindex == transactions[index]['category'].length - 1) {\n                    category = category + transactions[index]['category'][cindex];\n                  } else {\n                    category = category + transactions[index]['category'][cindex] + ', ';\n                  }\n                }\n                filterTransactions.push({\n                  key: index,\n                  date: transactions[index]['date'],\n                  category: category,\n                  name: transactions[index]['name'],\n                  amount: transactions[index]['amount'],\n                  raw: transactions[index]\n                });\n              }\n            }\n            reports.push({\n              reportData: filterTransactions,\n              reportCols: cols,\n              reportTitle: 'Transactions (' + accounts[aindex]['official_name'] + ')'\n            });\n          }\n        }\n        _this3.setState({\n          reports: reports,\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"getIncome\",\n    value: function getIncome() {\n      var _this4 = this;\n      axios.get(Config.backend_server + \"/plaid/income\").then(function (res) {\n        var incomes;\n        var filterIncome = [];\n        if (res.data.hasOwnProperty('income')) {\n          incomes = res.data['income']['income_streams'];\n          for (var index = 0; index < incomes.length; index++) {\n            filterIncome.push({\n              key: index,\n              confidence: incomes[index]['confidence'],\n              days: incomes[index]['days'],\n              monthly_income: incomes[index]['monthly_income'],\n              name: incomes[index]['name'],\n              raw: res.data['income']\n            });\n          }\n        }\n        var cols = [{\n          title: 'Confidence',\n          dataIndex: 'confidence',\n          key: 'confidence'\n        }, {\n          title: 'Days',\n          dataIndex: 'days',\n          key: 'days'\n        }, {\n          title: 'Monthly Income',\n          dataIndex: 'monthly_income',\n          key: 'monthly_income'\n        }, {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name'\n        }, {\n          title: '',\n          key: 'id',\n          render: function render(record) {\n            if (_this4.props.user.role != ROLES.VIEW_ONLY) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this4,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                className: \"report-action-btn report-action-btn--view\",\n                onClick: function onClick() {\n                  return _this4.fnImportPlaid(PLAID.IMPORT_INCOME, record);\n                },\n                __self: _this4,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 37\n                }\n              }, \"Import\"));\n            } else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this4,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 33\n                }\n              });\n            }\n          }\n        }];\n        _this4.setState({\n          reports: [{\n            reportData: filterIncome,\n            reportCols: cols,\n            reportTitle: 'Income'\n          }],\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance() {\n      var _this5 = this;\n      axios.get(Config.backend_server + \"/plaid/balance\").then(function (res) {\n        var accounts;\n        var filterBalances = [];\n        if (res.data.hasOwnProperty('accounts')) {\n          accounts = res.data['accounts'];\n          for (var index = 0; index < accounts.length; index++) {\n            filterBalances.push({\n              key: index,\n              account_id: accounts[index]['account_id'],\n              name: accounts[index]['name'],\n              official_name: accounts[index]['official_name'],\n              type: accounts[index]['type'],\n              subtype: accounts[index]['subtype'],\n              balance_available: accounts[index]['balances']['available'],\n              balance_current: accounts[index]['balances']['current'],\n              raw: accounts[index]\n            });\n          }\n        }\n        var cols = [{\n          title: 'Account ID',\n          dataIndex: 'account_id',\n          key: 'account_id'\n        }, {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name'\n        }, {\n          title: 'Official Name',\n          dataIndex: 'official_name',\n          key: 'official_name'\n        }, {\n          title: 'Type',\n          dataIndex: 'type',\n          key: 'type'\n        }, {\n          title: 'Subtype',\n          dataIndex: 'subtype',\n          key: 'subtype'\n        }, {\n          title: 'Balance Available',\n          dataIndex: 'balance_available',\n          key: 'balance_available'\n        }, {\n          title: 'Balance Current',\n          dataIndex: 'balance_current',\n          key: 'balance_current'\n        }, {\n          title: '',\n          key: 'id',\n          render: function render(record) {\n            if (_this5.props.user.role != ROLES.VIEW_ONLY) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this5,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                className: \"report-action-btn report-action-btn--view\",\n                onClick: function onClick() {\n                  return _this5.fnImportPlaid(PLAID.IMPORT_BALANCE, record);\n                },\n                __self: _this5,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 37\n                }\n              }, \"Import\"));\n            } else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this5,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 33\n                }\n              });\n            }\n          }\n        }];\n        _this5.setState({\n          reports: [{\n            reportData: filterBalances,\n            reportCols: cols,\n            reportTitle: 'Balance'\n          }],\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"getAssets\",\n    value: function getAssets() {}\n  }, {\n    key: \"getInvestments\",\n    value: function getInvestments() {\n      var _this6 = this;\n      axios.get(Config.backend_server + \"/plaid/investments\").then(function (res) {\n        var investments;\n        var filterInvestments = [];\n        if (res.data.hasOwnProperty('investment_transactions')) {\n          investments = res.data['investment_transactions'];\n          for (var index = 0; index < investments.length; index++) {\n            filterInvestments.push({\n              key: index,\n              account_id: investments[index]['account_id'],\n              amount: investments[index]['amount'],\n              date: investments[index]['date'],\n              name: investments[index]['name'],\n              price: investments[index]['price'],\n              quantity: investments[index]['quantity'],\n              type: investments[index]['type'],\n              raw: investments[index]\n            });\n          }\n        }\n        var cols = [{\n          title: 'Account ID',\n          dataIndex: 'account_id',\n          key: 'account_id'\n        }, {\n          title: 'Amount',\n          dataIndex: 'amount',\n          key: 'amount'\n        }, {\n          title: 'Date',\n          dataIndex: 'date',\n          key: 'date'\n        }, {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name'\n        }, {\n          title: 'Price',\n          dataIndex: 'price',\n          key: 'price'\n        }, {\n          title: 'Quantity',\n          dataIndex: 'quantity',\n          key: 'quantity'\n        }, {\n          title: 'Type',\n          dataIndex: 'type',\n          key: 'type'\n        }, {\n          title: '',\n          key: 'id',\n          render: function render(record) {\n            if (_this6.props.user.role != ROLES.VIEW_ONLY) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this6,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                className: \"report-action-btn report-action-btn--view\",\n                onClick: function onClick() {\n                  return _this6.fnImportPlaid(PLAID.IMPORT_INVESTMENT, record);\n                },\n                __self: _this6,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 37\n                }\n              }, \"Import\"));\n            } else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this6,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 33\n                }\n              });\n            }\n          }\n        }];\n        _this6.setState({\n          reports: [{\n            reportData: filterInvestments,\n            reportCols: cols,\n            reportTitle: 'Investment'\n          }],\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"getLiabilities\",\n    value: function getLiabilities() {\n      var _this7 = this;\n      axios.get(Config.backend_server + \"/plaid/liabilities\").then(function (res) {\n        var reports = [];\n        if (res.data.hasOwnProperty('liabilities')) {\n          if (res.data['liabilities'].hasOwnProperty('credit')) {\n            var credits = res.data['liabilities']['credit'];\n            var filterCredits = [];\n            for (var index = 0; index < credits.length; index++) {\n              filterCredits.push({\n                key: index,\n                account_id: credits[index]['account_id'],\n                last_payment_amount: credits[index]['last_payment_amount'],\n                last_payment_date: credits[index]['last_payment_date'],\n                last_statement_balance: credits[index]['last_statement_balance'],\n                minimum_payment_amount: credits[index]['minimum_payment_amount'],\n                next_payment_due_date: credits[index]['next_payment_due_date'],\n                raw: credits[index]\n              });\n            }\n            var creditCols = [{\n              title: 'Account ID',\n              dataIndex: 'account_id',\n              key: 'account_id'\n            }, {\n              title: 'Last Payment Amount',\n              dataIndex: 'last_payment_amount',\n              key: 'last_payment_amount'\n            }, {\n              title: 'Last Payment Date',\n              dataIndex: 'last_payment_date',\n              key: 'last_payment_date'\n            }, {\n              title: 'Last Statement Balance',\n              dataIndex: 'last_statement_balance',\n              key: 'last_statement_balance'\n            }, {\n              title: 'Minimum Payment Amount',\n              dataIndex: 'minimum_payment_amount',\n              key: 'minimum_payment_amount'\n            }, {\n              title: 'Next Payment Due Date',\n              dataIndex: 'next_payment_due_date',\n              key: 'next_payment_due_date'\n            }];\n            reports.push({\n              reportData: filterCredits,\n              reportCols: creditCols,\n              reportTitle: 'Liabilities (Credit)'\n            });\n          }\n          if (res.data['liabilities'].hasOwnProperty('student')) {\n            var students = res.data['liabilities']['student'];\n            var filterStudents = [];\n            for (var index = 0; index < students.length; index++) {\n              filterStudents.push({\n                key: index,\n                account_id: students[index]['account_id'],\n                guarantor: students[index]['guarantor'],\n                interest_rate_percentage: students[index]['interest_rate_percentage'],\n                last_payment_date: students[index]['last_payment_date'],\n                last_statement_balance: students[index]['last_statement_balance'],\n                minimum_payment_amount: students[index]['minimum_payment_amount'],\n                next_payment_due_date: students[index]['next_payment_due_date'],\n                origination_date: students[index]['origination_date'],\n                origination_principal_amount: students[index]['origination_principal_amount'],\n                outstanding_interest_amount: students[index]['outstanding_interest_amount'],\n                ytd_interest_paid: students[index]['ytd_interest_paid'],\n                ytd_principal_paid: students[index]['ytd_principal_paid'],\n                raw: students[index]\n              });\n            }\n            var studentCols = [{\n              title: 'Account ID',\n              dataIndex: 'account_id',\n              key: 'account_id'\n            }, {\n              title: 'Guarantor',\n              dataIndex: 'guarantor',\n              key: 'guarantor'\n            }, {\n              title: 'Interest Rate Percentage',\n              dataIndex: 'interest_rate_percentage',\n              key: 'interest_rate_percentage'\n            }, {\n              title: 'Last Payment Date',\n              dataIndex: 'last_payment_date',\n              key: 'last_payment_date'\n            }, {\n              title: 'Last Statement Balance',\n              dataIndex: 'last_statement_balance',\n              key: 'last_statement_balance'\n            }, {\n              title: 'Minimum Payment Amount',\n              dataIndex: 'minimum_payment_amount',\n              key: 'minimum_payment_amount'\n            }, {\n              title: 'Next Payment Due Date',\n              dataIndex: 'next_payment_due_date',\n              key: 'next_payment_due_date'\n            }, {\n              title: 'Origination Date',\n              dataIndex: 'origination_date',\n              key: 'origination_date'\n            }, {\n              title: 'Origination Principal Amount',\n              dataIndex: 'origination_principal_amount',\n              key: 'origination_principal_amount'\n            }, {\n              title: 'Outstanding InterestAmount',\n              dataIndex: 'outstanding_interest_amount',\n              key: 'outstanding_interest_amount'\n            }, {\n              title: 'Ytd Interest Paid',\n              dataIndex: 'ytd_interest_paid',\n              key: 'ytd_interest_paid'\n            }, {\n              title: 'Ytd Principal Paid',\n              dataIndex: 'ytd_principal_paid',\n              key: 'ytd_principal_paid'\n            }];\n            reports.push({\n              reportData: filterStudents,\n              reportCols: studentCols,\n              reportTitle: 'Liabilities (Student)'\n            });\n          }\n        }\n        _this7.setState({\n          reports: reports,\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(HiddenHook, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"top-btns-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(PlaidLink, {\n        clientName: \"React Plaid Setup\",\n        env: \"sandbox\",\n        product: [\"auth\", \"transactions\"],\n        publicKey: \"bd7569502deea3990dfc3886d403cf\",\n        onExit: this.handleOnExit,\n        onSuccess: this.handleOnSuccess,\n        className: \"plaid-connect-btn ant-btn ant-btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 25\n        }\n      }, \"Connect Plaid\"), this.props.plaid_connected && /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.fnImportAccounts();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 29\n        }\n      }, \"Import Accounts\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getTransactions();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 29\n        }\n      }, \"Get Transactions\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getIncome();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 29\n        }\n      }, \"Get Income\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getBalance();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 29\n        }\n      }, \"Get Balance\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getAssets();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 29\n        }\n      }, \"Get Assets\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getInvestments();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 29\n        }\n      }, \"Get Investments\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getLiabilities();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 29\n        }\n      }, \"Get Liabilities\"))), this.state.dataLoaded && this.state.reports.map(function (report, index) {\n        return /*#__PURE__*/React.createElement(Report, {\n          key: index,\n          cols: report.reportCols,\n          rows: report.reportData,\n          title: report.reportTitle,\n          __self: _this8,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 29\n          }\n        });\n      }));\n    }\n  }]);\n  return Plaid;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.rootReducer.loginUser.loginUserData,\n    plaid_connected: state.User.plaid_connected,\n    plaid_public_token: state.User.plaid_public_token\n  };\n};\nexport default connect(mapStateToProps, {\n  plaidLogin: plaidLogin\n})(Plaid);","map":{"version":3,"names":["React","Component","connect","Link","Modal","Button","ROLES","PlaidLink","axios","Report","Config","plaidLogin","useMutation","useQuery","QL_PLAID_ACCOUNT_ADD","QL_PLAID_INCOME_ADD","QL_PLAID_INVESTMENT_ADD","QL_PLAID_ITEM_ADD","fnMutationPlaidAccountAdd","fnMutationPlaidIncomeAdd","fnMutationPlaidInvestmentAdd","fnMutationPlaidItemAdd","HiddenHook","_useMutation","_useMutation2","_slicedToArray","_useMutation3","_useMutation4","_useMutation5","_useMutation6","_useMutation7","_useMutation8","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","PLAID","IMPORT_TRANSACTION","IMPORT_ACCOUNT","IMPORT_INCOME","IMPORT_INVESTMENT","IMPORT_ITEM","IMPORT_BALANCE","Plaid","_Component","_inherits","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","state","reports","reportData","reportCols","reportTitle","dataLoaded","handleOnSuccess","bind","_assertThisInitialized","handleOnExit","getTransactions","getIncome","getBalance","getAssets","getInvestments","getLiabilities","fnImportPlaid","fnImportAccounts","_createClass","key","value","componentDidMount","_this2","get","backend_server","then","res","accounts","data","console","log","varQL","index","length","accountId","props","user","id","plaidAccount","uuid","balances","available","current","iso_currency_code","limit","unofficial_currency_code","mask","name","officialName","subtype","plaidAccountType","variables","response","plaidImportType","plaidIncome","lastYearIncome","raw","last_year_income","lastYearIncomeBeforeTax","last_year_income_before_tax","maxNumberOfOverlappingIncomeStreams","max_number_of_overlapping_income_streams","numberOfIncomeStreams","number_of_income_streams","projectedYearlyIncome","projected_yearly_income","projectedYearlyIncomeBeforeTax","projected_yearly_income_before_tax","plaidInvestment","account_id","amount","cancelTransactionId","cancel_transaction_id","date","fees","investmentTransactionId","investment_transaction_id","isoCurrencyCode","price","quantity","securityId","security_id","investmentType","type","unofficialCurrencyCode","public_token","metadata","window","localStorage","setItem","instance","post","resp","_this3","cols","title","dataIndex","render","record","role","VIEW_ONLY","className","onClick","hasOwnProperty","transactions","aindex","filterTransactions","category","cindex","push","setState","_this4","incomes","filterIncome","confidence","days","monthly_income","_this5","filterBalances","official_name","balance_available","balance_current","_this6","investments","filterInvestments","_this7","credits","filterCredits","last_payment_amount","last_payment_date","last_statement_balance","minimum_payment_amount","next_payment_due_date","creditCols","students","filterStudents","guarantor","interest_rate_percentage","origination_date","origination_principal_amount","outstanding_interest_amount","ytd_interest_paid","ytd_principal_paid","studentCols","_this8","clientName","env","product","publicKey","onExit","onSuccess","plaid_connected","map","report","rows","mapStateToProps","rootReducer","loginUser","loginUserData","User","plaid_public_token"],"sources":["/Users/mudasirbukhari/Desktop/techbucks/ApMudasirzip/src/pages/modules/budget/Plaid.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport { Modal, Button } from 'antd';\nimport ROLES from 'constants/roles';\nimport PlaidLink from \"react-plaid-link\";\nimport axios from \"axios\";\nimport Report from 'components/Report';\nimport Config from 'Config';\nimport { plaidLogin } from 'redux/actions';\n\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport {\n    QL_PLAID_ACCOUNT_ADD,\n    QL_PLAID_INCOME_ADD,\n    QL_PLAID_INVESTMENT_ADD,\n    QL_PLAID_ITEM_ADD\n} from '../../../constants/queries';\n\nvar fnMutationPlaidAccountAdd = null;\nvar fnMutationPlaidIncomeAdd = null;\nvar fnMutationPlaidInvestmentAdd = null;\nvar fnMutationPlaidItemAdd = null;\n\n\nfunction HiddenHook(){\n    [fnMutationPlaidAccountAdd] = useMutation(QL_PLAID_ACCOUNT_ADD);\n    [fnMutationPlaidIncomeAdd] = useMutation(QL_PLAID_INCOME_ADD);\n    [fnMutationPlaidInvestmentAdd] = useMutation(QL_PLAID_INVESTMENT_ADD);\n    [fnMutationPlaidItemAdd] = useMutation(QL_PLAID_ITEM_ADD);\n\n    return (\n        <React.Fragment></React.Fragment>\n    )\n}\n\nconst PLAID = {\n    IMPORT_TRANSACTION: 'PLAID_IMPORT_TRANSACTION',\n    IMPORT_ACCOUNT: 'PLAID_IMPORT_ACCOUNT',\n    IMPORT_INCOME: 'PLAID_IMPORT_INCOME',\n    IMPORT_INVESTMENT: 'PLAID_IMPORT_INVESTMENT',\n    IMPORT_ITEM: 'PLAID_IMPORT_ITEM',\n    IMPORT_BALANCE: 'PLAID_IMPORT_BALANCE'\n}\nclass Plaid extends Component {\n\n    constructor() {\n        super();\n    \n        this.state = {\n            reports: {\n                reportData: [],\n                reportCols: {},\n                reportTitle: ''\n            },\n            dataLoaded: false\n        };\n    \n        this.handleOnSuccess = this.handleOnSuccess.bind(this);\n        this.handleOnExit = this.handleOnExit.bind(this);\n\n        this.getTransactions = this.getTransactions.bind(this);\n        this.getIncome = this.getIncome.bind(this);\n        this.getBalance = this.getBalance.bind(this);\n        this.getAssets = this.getAssets.bind(this);\n        this.getInvestments = this.getInvestments.bind(this);\n        this.getLiabilities = this.getLiabilities.bind(this);\n\n        this.fnImportPlaid = this.fnImportPlaid.bind(this);\n        this.fnImportAccounts = this.fnImportAccounts.bind(this);\n    }\n    \n    componentDidMount(){\n        \n    }\n\n    fnImportAccounts(){\n\n        axios.get(Config.backend_server + \"/plaid/accounts\").then(res => {\n            var accounts = res.data['accounts'];\n\n            console.log('accounts:', accounts);\n            let varQL = null;\n            for(var index = 0; index < accounts.length; index++){\n                varQL = {\n                    accountId: '' + this.props.user.id,\n                    plaidAccount: {\n                        uuid: accounts[index]['account_id'],\n                        balances: {\n                            available: accounts[index]['balances']['available'],\n                            current: accounts[index]['balances']['current'],\n                            iso_currency_code: accounts[index]['balances']['iso_currency_code'],\n                            limit: accounts[index]['balances']['limit'],\n                            unofficial_currency_code: accounts[index]['balances']['unofficial_currency_code'],\n                        },\n                        mask: accounts[index]['mask'],\n                        name: accounts[index]['name'],\n                        officialName: accounts[index]['offical_name'],\n                        subtype: accounts[index]['subtype'],\n                        plaidAccountType: accounts[index]['type'],\n                    }\n                }\n                console.log('varQL:', varQL);\n                fnMutationPlaidAccountAdd({ variables: { data: varQL } }).then((response) => {\n                });\n            }\n        });\n\n        \n    }\n\n    fnImportPlaid(plaidImportType, data){\n        console.log(plaidImportType, data);\n        let varQL = null;\n        switch(plaidImportType){\n            case PLAID.IMPORT_TRANSACTION: \n                break;\n            case PLAID.IMPORT_ACCOUNT: \n                // varQL = {\n\n                // }\n                // fnMutationPlaidAccountAdd(this.props.user.id, { variables: { data: varQL } }).then((response) => {\n                // });\n                break;\n            case PLAID.IMPORT_INCOME: \n                varQL = {\n                    accountId: '' + this.props.user.id,\n                    plaidIncome: {\n                        // incomeStreams: \n                        lastYearIncome: data.raw.last_year_income,\n                        lastYearIncomeBeforeTax: data.raw.last_year_income_before_tax,\n                        maxNumberOfOverlappingIncomeStreams: data.raw.max_number_of_overlapping_income_streams,\n                        numberOfIncomeStreams: data.raw.number_of_income_streams,\n                        projectedYearlyIncome: data.raw.projected_yearly_income,\n                        projectedYearlyIncomeBeforeTax: data.raw.projected_yearly_income_before_tax\n                    }\n                }\n                console.log('varQL:', varQL);\n                fnMutationPlaidIncomeAdd({ variables: { data: varQL } }).then((response) => {\n                });\n                break;\n\n            case PLAID.IMPORT_INVESTMENT: \n                \n                varQL = {\n                    accountId: '' + this.props.user.id,\n                    plaidInvestment: {\n                        uuid: data.raw.account_id,\n                        amount: data.raw.amount,\n                        cancelTransactionId: data.raw.cancel_transaction_id,\n                        date: data.raw.date,\n                        fees: data.raw.fees,\n                        investmentTransactionId: data.raw.investment_transaction_id,\n                        isoCurrencyCode: data.raw.iso_currency_code,\n                        name: data.raw.name,\n                        price: data.raw.price,\n                        quantity: data.raw.quantity,\n                        securityId: data.raw.security_id,\n                        investmentType: data.raw.type,\n                        // investmentType: data.raw.subtype,\n                        unofficialCurrencyCode: data.raw.unofficial_currency_code\n                    }\n                }\n                console.log('varQL:', varQL);\n                fnMutationPlaidInvestmentAdd({ variables: { data: varQL } }).then((response) => {\n                });\n                break;\n\n            case PLAID.IMPORT_ITEM: \n                \n                // fnMutationPlaidItemAdd(this.props.user.id, { variables: { data: varQL } }).then((response) => {\n                // });\n                break;\n\n            case PLAID.IMPORT_BALANCE: \n                break;\n        }\n    }\n\n    handleOnSuccess(public_token, metadata) {\n        // send token to client server\n\n        window.localStorage.setItem('plaid_connected', true);\n        window.localStorage.setItem('plaid_public_token', public_token);\n\n        this.props.plaidLogin(true, public_token);\n        var instance = this;\n        axios.post(Config.backend_server + \"/plaid/auth/public_token\", {\n            public_token: public_token\n        }).then(function(resp){\n            instance.fnImportAccounts();\n        });\n    }\n    \n    handleOnExit() {\n        // handle the case when your user exits Link\n        // For the sake of this tutorial, we're not going to be doing anything here.\n    }\n    \n    getTransactions() {\n        axios.get(Config.backend_server + \"/plaid/transactions\").then(res => {\n            const cols = [\n                {\n                    title: 'Date',\n                    dataIndex: 'date',\n                    key: 'date'\n                },\n                {\n                    title: 'Category',\n                    dataIndex: 'category',\n                    key: 'category'\n                },\n                {\n                    title: 'Name',\n                    dataIndex: 'name',\n                    key: 'name'\n                },\n                {\n                    title: 'Amount',\n                    dataIndex: 'amount',\n                    key: 'amount'\n                },\n                {\n                    title: '',\n                    key: 'id',\n                    render: (record) => {\n                        if(this.props.user.role != ROLES.VIEW_ONLY){\n                            return(\n                                <span>\n                                    <a className=\"report-action-btn report-action-btn--view\" onClick={() => this.fnImportPlaid(PLAID.IMPORT_TRANSACTION, record)}>Import</a>\n                                </span>\n                            )\n                        }\n                        else{\n                            return (\n                                <React.Fragment>\n                                </React.Fragment>\n                            )\n                        }\n                    }\n                }\n            ]\n\n            var reports = [];\n            if(res.data.hasOwnProperty('transactions')){\n                var accounts = res.data['accounts'];\n                var transactions = res.data['transactions'];\n                for(var aindex = 0; aindex < accounts.length; aindex++){\n                    var account_id = accounts[aindex]['account_id'];\n                    var filterTransactions = [];\n                    for(var index = 0; index < transactions.length; index++){\n                        if(transactions[index]['account_id'] == account_id){\n                            var category = '';\n                            for(var cindex = 0; cindex < transactions[index]['category'].length; cindex++){\n                                if(cindex == (transactions[index]['category'].length - 1)){\n                                    category = category + transactions[index]['category'][cindex];\n                                }\n                                else{\n                                    category = category + transactions[index]['category'][cindex] + ', ';\n                                }\n                            }\n                            filterTransactions.push({\n                                key: index,\n                                date: transactions[index]['date'],\n                                category: category,\n                                name: transactions[index]['name'],\n                                amount: transactions[index]['amount'],\n                                raw: transactions[index]\n                            })\n                        }\n                    }\n\n                    reports.push({\n                        reportData: filterTransactions,\n                        reportCols: cols,\n                        reportTitle: 'Transactions (' + accounts[aindex]['official_name'] + ')'\n                    })\n                }\n                                \n            }\n            \n            \n\n            this.setState({ \n                reports: reports,\n                dataLoaded: true\n            });\n        });\n    }\n\n    getIncome() {\n        axios.get(Config.backend_server + \"/plaid/income\").then(res => {\n            var incomes;\n            var filterIncome = [];\n            \n            if(res.data.hasOwnProperty('income')){\n                incomes = res.data['income']['income_streams'];\n                for(var index = 0; index < incomes.length; index++){\n\n                    filterIncome.push({\n                        key: index,\n                        confidence: incomes[index]['confidence'],\n                        days: incomes[index]['days'],\n                        monthly_income: incomes[index]['monthly_income'],\n                        name: incomes[index]['name'],\n                        raw: res.data['income']\n                    })\n                }\n            }\n\n            const cols = [\n                {\n                    title: 'Confidence',\n                    dataIndex: 'confidence',\n                    key: 'confidence'\n                },\n                {\n                    title: 'Days',\n                    dataIndex: 'days',\n                    key: 'days'\n                },\n                {\n                    title: 'Monthly Income',\n                    dataIndex: 'monthly_income',\n                    key: 'monthly_income'\n                },\n                {\n                    title: 'Name',\n                    dataIndex: 'name',\n                    key: 'name'\n                },\n                {\n                    title: '',\n                    key: 'id',\n                    render: (record) => {\n                        if(this.props.user.role != ROLES.VIEW_ONLY){\n                            return(\n                                <span>\n                                    <a className=\"report-action-btn report-action-btn--view\" onClick={() => this.fnImportPlaid(PLAID.IMPORT_INCOME, record)}>Import</a>\n                                </span>\n                            )\n                        }\n                        else{\n                            return (\n                                <React.Fragment>\n                                </React.Fragment>\n                            )\n                        }\n                    }\n                }\n            ]\n            \n            this.setState({ \n                reports: [\n                    {\n                        reportData: filterIncome,\n                        reportCols: cols,\n                        reportTitle: 'Income'\n                    }\n                ],\n                dataLoaded: true\n            });\n        });\n    }\n\n    getBalance() {\n        axios.get(Config.backend_server + \"/plaid/balance\").then(res => {\n            var accounts;\n            var filterBalances = [];\n            \n            if(res.data.hasOwnProperty('accounts')){\n                accounts = res.data['accounts'];\n                for(var index = 0; index < accounts.length; index++){\n                    filterBalances.push({\n                        key: index,\n                        account_id: accounts[index]['account_id'],\n                        name: accounts[index]['name'],\n                        official_name: accounts[index]['official_name'],\n                        type: accounts[index]['type'],\n                        subtype: accounts[index]['subtype'],\n                        balance_available: accounts[index]['balances']['available'],\n                        balance_current: accounts[index]['balances']['current'],\n                        raw: accounts[index]\n                    })\n                }\n            }\n            \n            const cols = [\n                {\n                    title: 'Account ID',\n                    dataIndex: 'account_id',\n                    key: 'account_id'\n                },\n                {\n                    title: 'Name',\n                    dataIndex: 'name',\n                    key: 'name'\n                },\n                {\n                    title: 'Official Name',\n                    dataIndex: 'official_name',\n                    key: 'official_name'\n                },\n                {\n                    title: 'Type',\n                    dataIndex: 'type',\n                    key: 'type'\n                },\n                {\n                    title: 'Subtype',\n                    dataIndex: 'subtype',\n                    key: 'subtype'\n                },\n                {\n                    title: 'Balance Available',\n                    dataIndex: 'balance_available',\n                    key: 'balance_available'\n                },\n                {\n                    title: 'Balance Current',\n                    dataIndex: 'balance_current',\n                    key: 'balance_current'\n                },\n                {\n                    title: '',\n                    key: 'id',\n                    render: (record) => {\n                        if(this.props.user.role != ROLES.VIEW_ONLY){\n                            return(\n                                <span>\n                                    <a className=\"report-action-btn report-action-btn--view\" onClick={() => this.fnImportPlaid(PLAID.IMPORT_BALANCE, record)}>Import</a>\n                                </span>\n                            )\n                        }\n                        else{\n                            return (\n                                <React.Fragment>\n                                </React.Fragment>\n                            )\n                        }\n                    }\n                }\n            ]\n            \n            this.setState({ \n                reports: [\n                    {\n                        reportData: filterBalances,\n                        reportCols: cols,\n                        reportTitle: 'Balance'\n                    }\n                ],\n                dataLoaded: true\n            });\n        });\n    }\n\n    getAssets() {\n\n    }\n\n    getInvestments() {\n        axios.get(Config.backend_server + \"/plaid/investments\").then(res => {\n            var investments;\n            var filterInvestments = [];\n            \n            if(res.data.hasOwnProperty('investment_transactions')){\n                investments = res.data['investment_transactions'];\n                for(var index = 0; index < investments.length; index++){\n\n                    filterInvestments.push({\n                        key: index,\n                        account_id: investments[index]['account_id'],\n                        amount: investments[index]['amount'],\n                        date: investments[index]['date'],\n                        name: investments[index]['name'],\n                        price: investments[index]['price'],\n                        quantity: investments[index]['quantity'],\n                        type: investments[index]['type'],\n                        raw: investments[index]\n                    })\n                }\n            }\n            \n            const cols = [\n                {\n                    title: 'Account ID',\n                    dataIndex: 'account_id',\n                    key: 'account_id'\n                },\n                {\n                    title: 'Amount',\n                    dataIndex: 'amount',\n                    key: 'amount'\n                },\n                {\n                    title: 'Date',\n                    dataIndex: 'date',\n                    key: 'date'\n                },\n                {\n                    title: 'Name',\n                    dataIndex: 'name',\n                    key: 'name'\n                },\n                {\n                    title: 'Price',\n                    dataIndex: 'price',\n                    key: 'price'\n                },\n                {\n                    title: 'Quantity',\n                    dataIndex: 'quantity',\n                    key: 'quantity'\n                },\n                {\n                    title: 'Type',\n                    dataIndex: 'type',\n                    key: 'type'\n                },\n                {\n                    title: '',\n                    key: 'id',\n                    render: (record) => {\n                        if(this.props.user.role != ROLES.VIEW_ONLY){\n                            return(\n                                <span>\n                                    <a className=\"report-action-btn report-action-btn--view\" onClick={() => this.fnImportPlaid(PLAID.IMPORT_INVESTMENT, record)}>Import</a>\n                                </span>\n                            )\n                        }\n                        else{\n                            return (\n                                <React.Fragment>\n                                </React.Fragment>\n                            )\n                        }\n                    }\n                }\n            ]\n            \n            this.setState({ \n                reports: [\n                    {\n                        reportData: filterInvestments,\n                        reportCols: cols,\n                        reportTitle: 'Investment',\n                    }\n                ],\n                dataLoaded: true\n            });\n        });\n    }\n\n    getLiabilities() {\n        axios.get(Config.backend_server + \"/plaid/liabilities\").then(res => {            \n            var reports = [];\n            \n            if(res.data.hasOwnProperty('liabilities')){\n                if(res.data['liabilities'].hasOwnProperty('credit')){\n                    var credits = res.data['liabilities']['credit'];\n                    var filterCredits = [];\n                    for(var index = 0; index < credits.length; index++){                        \n                        filterCredits.push({\n                            key: index,\n                            account_id: credits[index]['account_id'],\n                            last_payment_amount: credits[index]['last_payment_amount'],\n                            last_payment_date: credits[index]['last_payment_date'],\n                            last_statement_balance: credits[index]['last_statement_balance'],\n                            minimum_payment_amount: credits[index]['minimum_payment_amount'],\n                            next_payment_due_date: credits[index]['next_payment_due_date'],\n                            raw: credits[index]\n                        })\n                    }\n\n                    var creditCols = [\n                        {\n                            title: 'Account ID',\n                            dataIndex: 'account_id',\n                            key: 'account_id'\n                        },\n                        {\n                            title: 'Last Payment Amount',\n                            dataIndex: 'last_payment_amount',\n                            key: 'last_payment_amount'\n                        },\n                        {\n                            title: 'Last Payment Date',\n                            dataIndex: 'last_payment_date',\n                            key: 'last_payment_date'\n                        },\n                        {\n                            title: 'Last Statement Balance',\n                            dataIndex: 'last_statement_balance',\n                            key: 'last_statement_balance'\n                        },\n                        {\n                            title: 'Minimum Payment Amount',\n                            dataIndex: 'minimum_payment_amount',\n                            key: 'minimum_payment_amount'\n                        },\n                        {\n                            title: 'Next Payment Due Date',\n                            dataIndex: 'next_payment_due_date',\n                            key: 'next_payment_due_date'\n                        }\n                    ]\n\n                    reports.push({\n                        reportData: filterCredits,\n                        reportCols: creditCols,\n                        reportTitle: 'Liabilities (Credit)',\n                    })\n                }\n\n                if(res.data['liabilities'].hasOwnProperty('student')){\n                    var students = res.data['liabilities']['student'];\n                    var filterStudents = [];\n                    for(var index = 0; index < students.length; index++){                        \n                        filterStudents.push({\n                            key: index,\n                            account_id: students[index]['account_id'],\n                            guarantor: students[index]['guarantor'],\n                            interest_rate_percentage: students[index]['interest_rate_percentage'],\n                            last_payment_date: students[index]['last_payment_date'],\n                            last_statement_balance: students[index]['last_statement_balance'],\n                            minimum_payment_amount: students[index]['minimum_payment_amount'],\n                            next_payment_due_date: students[index]['next_payment_due_date'],\n                            origination_date: students[index]['origination_date'],\n                            origination_principal_amount: students[index]['origination_principal_amount'],\n                            outstanding_interest_amount: students[index]['outstanding_interest_amount'],\n                            ytd_interest_paid: students[index]['ytd_interest_paid'],\n                            ytd_principal_paid: students[index]['ytd_principal_paid'],\n                            raw: students[index]\n                        })\n                    }\n\n                    var studentCols = [\n                        {\n                            title: 'Account ID',\n                            dataIndex: 'account_id',\n                            key: 'account_id'\n                        },\n                        {\n                            title: 'Guarantor',\n                            dataIndex: 'guarantor',\n                            key: 'guarantor'\n                        },\n                        {\n                            title: 'Interest Rate Percentage',\n                            dataIndex: 'interest_rate_percentage',\n                            key: 'interest_rate_percentage'\n                        },\n                        {\n                            title: 'Last Payment Date',\n                            dataIndex: 'last_payment_date',\n                            key: 'last_payment_date'\n                        },\n                        {\n                            title: 'Last Statement Balance',\n                            dataIndex: 'last_statement_balance',\n                            key: 'last_statement_balance'\n                        },\n                        {\n                            title: 'Minimum Payment Amount',\n                            dataIndex: 'minimum_payment_amount',\n                            key: 'minimum_payment_amount'\n                        },\n                        {\n                            title: 'Next Payment Due Date',\n                            dataIndex: 'next_payment_due_date',\n                            key: 'next_payment_due_date'\n                        },\n                        {\n                            title: 'Origination Date',\n                            dataIndex: 'origination_date',\n                            key: 'origination_date'\n                        },\n                        {\n                            title: 'Origination Principal Amount',\n                            dataIndex: 'origination_principal_amount',\n                            key: 'origination_principal_amount'\n                        },\n                        {\n                            title: 'Outstanding InterestAmount',\n                            dataIndex: 'outstanding_interest_amount',\n                            key: 'outstanding_interest_amount'\n                        },\n                        {\n                            title: 'Ytd Interest Paid',\n                            dataIndex: 'ytd_interest_paid',\n                            key: 'ytd_interest_paid'\n                        },\n                        {\n                            title: 'Ytd Principal Paid',\n                            dataIndex: 'ytd_principal_paid',\n                            key: 'ytd_principal_paid'\n                        }\n                    ]\n\n                    reports.push({\n                        reportData: filterStudents,\n                        reportCols: studentCols,\n                        reportTitle: 'Liabilities (Student)',\n                    })\n                }\n                \n            }\n            \n            this.setState({ \n                reports: reports,\n                dataLoaded: true\n            });\n        });\n    }\n    \n    render() {\n        \n        return (\n            <React.Fragment>         \n                <HiddenHook />\n                <div className=\"top-btns-container\">\n                    {\n                        <PlaidLink\n                            clientName=\"React Plaid Setup\"\n                            env=\"sandbox\"\n                            product={[\"auth\", \"transactions\"]}\n                            publicKey=\"bd7569502deea3990dfc3886d403cf\"\n                            onExit={this.handleOnExit}\n                            onSuccess={this.handleOnSuccess}\n                            className=\"plaid-connect-btn ant-btn ant-btn-primary\"\n                        >\n                            Connect Plaid\n                        </PlaidLink>\n                    }\n                    {\n                        this.props.plaid_connected &&\n                        <React.Fragment>\n                            <Button type=\"primary\" onClick={() => this.fnImportAccounts()}>Import Accounts</Button>\n                            <Button type=\"primary\" onClick={() => this.getTransactions()}>Get Transactions</Button>\n                            <Button type=\"primary\" onClick={() => this.getIncome()}>Get Income</Button>\n                            <Button type=\"primary\" onClick={() => this.getBalance()}>Get Balance</Button>\n                            <Button type=\"primary\" onClick={() => this.getAssets()}>Get Assets</Button>\n                            <Button type=\"primary\" onClick={() => this.getInvestments()}>Get Investments</Button>\n                            <Button type=\"primary\" onClick={() => this.getLiabilities()}>Get Liabilities</Button>\n                        </React.Fragment>\n                    }       \n                </div>\n                {\n                    this.state.dataLoaded &&\n                    this.state.reports.map((report, index) => {\n                        return (\n                            <Report \n                                key={index}\n                                cols={report.reportCols} \n                                rows={report.reportData}\n                                title={report.reportTitle}\n                            ></Report>\n                        )\n                    })\n                }             \n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.rootReducer.loginUser.loginUserData,\n\n        plaid_connected: state.User.plaid_connected,\n        plaid_public_token: state.User.plaid_public_token\n    }\n}\n\nexport default connect(mapStateToProps, { plaidLogin })(Plaid);"],"mappings":"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"},"metadata":{},"sourceType":"module"}