{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\nvar _inherits2 = require('babel-runtime/helpers/inherits');\nvar _inherits3 = _interopRequireDefault(_inherits2);\nvar _react = require('react');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction validComponent(input) {\n  var name = input && input.props ? input.props.name : undefined;\n  if (!name) {\n    throw new Error('Input ' + input + ' has no \"name\" prop');\n  }\n  return {\n    name: name\n  };\n}\nvar InputContainer = function (_Component) {\n  (0, _inherits3.default)(InputContainer, _Component);\n  function InputContainer() {\n    (0, _classCallCheck3.default)(this, InputContainer);\n    return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));\n  }\n  InputContainer.prototype.componentWillMount = function componentWillMount() {\n    this._updaters = {};\n    this._inputs = {};\n  };\n  InputContainer.prototype.getOldInputName = function getOldInputName(input) {\n    for (var key in this._inputs) {\n      if (this._inputs[key] === input) {\n        return key;\n      }\n    }\n  };\n  InputContainer.prototype.registerInput = function registerInput(input) {\n    var updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : input && input.setState && input.setState.bind(input);\n    var _validComponent = validComponent(input, updater),\n      name = _validComponent.name;\n    var oldName = this.getOldInputName(input);\n    if (oldName !== name) {\n      if (oldName) {\n        this.unregisterInput({\n          props: {\n            name: oldName\n          }\n        });\n      }\n      this._updaters[name] = updater;\n      this._inputs[name] = input;\n    }\n  };\n  InputContainer.prototype.unregisterInput = function unregisterInput(input) {\n    var _validComponent2 = validComponent(input),\n      name = _validComponent2.name;\n    delete this._updaters[name];\n    delete this._inputs[name];\n  };\n  return InputContainer;\n}(_react.Component);\nexports.default = InputContainer;","map":null,"metadata":{},"sourceType":"script"}