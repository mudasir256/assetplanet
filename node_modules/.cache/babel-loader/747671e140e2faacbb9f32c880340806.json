{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/* tslint:disable:member-ordering interface-name */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Editor, EditorState, ContentState, CompositeDecorator, Modifier, getDefaultKeyBinding, KeyBindingUtil, DefaultDraftBlockRenderMap } from 'draft-js';\nimport { List, Map } from 'immutable';\nimport 'setimmediate';\nimport classnames from 'classnames';\nimport { createToolbar } from '../Toolbar';\nimport ConfigStore from './ConfigStore';\nimport GetHTML from './export/getHTML';\nimport exportText, { decodeContent } from './export/exportText';\nimport customHTML2Content from './customHTML2Content';\nvar hasCommandModifier = KeyBindingUtil.hasCommandModifier;\nfunction noop() {}\n;\nvar defaultPluginConfig = {};\nvar focusDummyStyle = {\n  width: 0,\n  opacity: 0,\n  border: 0,\n  position: 'absolute',\n  left: 0,\n  top: 0\n};\nvar toolbar = createToolbar();\nvar configStore = new ConfigStore();\nvar EditorCore = function (_React$Component) {\n  _inherits(EditorCore, _React$Component);\n  function EditorCore(props) {\n    _classCallCheck(this, EditorCore);\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n    _this.cancelForceUpdateImmediate = function () {\n      clearImmediate(_this.forceUpdateImmediate);\n      _this.forceUpdateImmediate = null;\n    };\n    _this.handlePastedText = function (text, html) {\n      var editorState = _this.state.editorState;\n      if (html) {\n        var contentState = editorState.getCurrentContent();\n        var selection = editorState.getSelection();\n        var fragment = customHTML2Content(html, contentState);\n        var pastedContent = Modifier.replaceWithFragment(contentState, selection, fragment);\n        var newContent = pastedContent.merge({\n          selectionBefore: selection,\n          selectionAfter: pastedContent.getSelectionAfter().set('hasFocus', true)\n        });\n        _this.setEditorState(EditorState.push(editorState, newContent, 'insert-fragment'), true);\n        return 'handled';\n      }\n      return 'not-handled';\n    };\n    _this.plugins = List(List(props.plugins).flatten(true));\n    var editorState = void 0;\n    if (props.value !== undefined) {\n      if (props.value instanceof EditorState) {\n        editorState = props.value || EditorState.createEmpty();\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n    } else {\n      editorState = EditorState.createEmpty();\n    }\n    editorState = _this.generatorDefaultValue(editorState);\n    _this.state = {\n      plugins: _this.reloadPlugins(),\n      editorState: editorState,\n      customStyleMap: {},\n      customBlockStyleMap: {},\n      compositeDecorator: null\n    };\n    if (props.value !== undefined) {\n      _this.controlledMode = true;\n    }\n    return _this;\n  }\n  EditorCore.ToEditorState = function ToEditorState(text) {\n    var createEmptyContentState = ContentState.createFromText(decodeContent(text) || '');\n    var editorState = EditorState.createWithContent(createEmptyContentState);\n    return EditorState.forceSelection(editorState, createEmptyContentState.getSelectionAfter());\n  };\n  EditorCore.prototype.getDefaultValue = function getDefaultValue() {\n    var _props = this.props,\n      defaultValue = _props.defaultValue,\n      value = _props.value;\n    return value || defaultValue;\n  };\n  EditorCore.prototype.Reset = function Reset() {\n    var defaultValue = this.getDefaultValue();\n    var contentState = defaultValue ? defaultValue.getCurrentContent() : ContentState.createFromText('');\n    var updatedEditorState = EditorState.push(this.state.editorState, contentState, 'remove-range');\n    this.setEditorState(EditorState.forceSelection(updatedEditorState, contentState.getSelectionBefore()));\n  };\n  EditorCore.prototype.SetText = function SetText(text) {\n    var createTextContentState = ContentState.createFromText(text || '');\n    var editorState = EditorState.push(this.state.editorState, createTextContentState, 'change-block-data');\n    this.setEditorState(EditorState.moveFocusToEnd(editorState), true);\n  };\n  EditorCore.prototype.getChildContext = function getChildContext() {\n    return {\n      getEditorState: this.getEditorState,\n      setEditorState: this.setEditorState\n    };\n  };\n  EditorCore.prototype.reloadPlugins = function reloadPlugins() {\n    var _this2 = this;\n    return this.plugins && this.plugins.size ? this.plugins.map(function (plugin) {\n      // 如果插件有 callbacks 方法,则认为插件已经加载。\n      if (plugin.callbacks) {\n        return plugin;\n      }\n      // 如果插件有 constructor 方法,则构造插件\n      if (plugin.hasOwnProperty('constructor')) {\n        var pluginConfig = _extends(_this2.props.pluginConfig, plugin.config || {}, defaultPluginConfig);\n        return plugin.constructor(pluginConfig);\n      }\n      // else 无效插件\n      console.warn('>> 插件: [', plugin.name, '] 无效。插件或许已经过期。');\n      return false;\n    }).filter(function (plugin) {\n      return plugin;\n    }).toArray() : [];\n  };\n  EditorCore.prototype.componentWillMount = function componentWillMount() {\n    var plugins = this.initPlugins().concat([toolbar]);\n    var customStyleMap = {};\n    var customBlockStyleMap = {};\n    var customBlockRenderMap = Map(DefaultDraftBlockRenderMap);\n    var toHTMLList = List([]);\n    // initialize compositeDecorator\n    var compositeDecorator = new CompositeDecorator(plugins.filter(function (plugin) {\n      return plugin.decorators !== undefined;\n    }).map(function (plugin) {\n      return plugin.decorators;\n    }).reduce(function (prev, curr) {\n      return prev.concat(curr);\n    }, []));\n    // initialize Toolbar\n    var toolbarPlugins = List(plugins.filter(function (plugin) {\n      return !!plugin.component && plugin.name !== 'toolbar';\n    }));\n    // load inline styles...\n    plugins.forEach(function (plugin) {\n      var styleMap = plugin.styleMap,\n        blockStyleMap = plugin.blockStyleMap,\n        blockRenderMap = plugin.blockRenderMap,\n        toHtml = plugin.toHtml;\n      if (styleMap) {\n        for (var key in styleMap) {\n          if (styleMap.hasOwnProperty(key)) {\n            customStyleMap[key] = styleMap[key];\n          }\n        }\n      }\n      if (blockStyleMap) {\n        for (var _key in blockStyleMap) {\n          if (blockStyleMap.hasOwnProperty(_key)) {\n            customBlockStyleMap[_key] = blockStyleMap[_key];\n            customBlockRenderMap = customBlockRenderMap.set(_key, {\n              element: null\n            });\n          }\n        }\n      }\n      if (toHtml) {\n        toHTMLList = toHTMLList.push(toHtml);\n      }\n      if (blockRenderMap) {\n        for (var _key2 in blockRenderMap) {\n          if (blockRenderMap.hasOwnProperty(_key2)) {\n            customBlockRenderMap = customBlockRenderMap.set(_key2, blockRenderMap[_key2]);\n          }\n        }\n      }\n    });\n    configStore.set('customStyleMap', customStyleMap);\n    configStore.set('customBlockStyleMap', customBlockStyleMap);\n    configStore.set('blockRenderMap', customBlockRenderMap);\n    configStore.set('customStyleFn', this.customStyleFn.bind(this));\n    configStore.set('toHTMLList', toHTMLList);\n    this.setState({\n      toolbarPlugins: toolbarPlugins,\n      compositeDecorator: compositeDecorator\n    });\n    this.setEditorState(EditorState.set(this.state.editorState, {\n      decorator: compositeDecorator\n    }), false, false);\n  };\n  EditorCore.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.forceUpdateImmediate) {\n      this.cancelForceUpdateImmediate();\n    }\n    if (this.controlledMode) {\n      var decorators = nextProps.value.getDecorator();\n      var editorState = decorators ? nextProps.value : EditorState.set(nextProps.value, {\n        decorator: this.state.compositeDecorator\n      });\n      this.setState({\n        editorState: editorState\n      });\n    }\n  };\n  EditorCore.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.cancelForceUpdateImmediate();\n  };\n  // 处理 value\n\n  EditorCore.prototype.generatorDefaultValue = function generatorDefaultValue(editorState) {\n    var defaultValue = this.getDefaultValue();\n    if (defaultValue) {\n      return defaultValue;\n    }\n    return editorState;\n  };\n  EditorCore.prototype.getStyleMap = function getStyleMap() {\n    return configStore.get('customStyleMap');\n  };\n  EditorCore.prototype.setStyleMap = function setStyleMap(customStyleMap) {\n    configStore.set('customStyleMap', customStyleMap);\n    this.render();\n  };\n  EditorCore.prototype.initPlugins = function initPlugins() {\n    var _this3 = this;\n    var enableCallbacks = ['focus', 'getEditorState', 'setEditorState', 'getStyleMap', 'setStyleMap'];\n    return this.getPlugins().map(function (plugin) {\n      enableCallbacks.forEach(function (callbackName) {\n        if (plugin.callbacks.hasOwnProperty(callbackName)) {\n          plugin.callbacks[callbackName] = _this3[callbackName].bind(_this3);\n        }\n      });\n      return plugin;\n    });\n  };\n  EditorCore.prototype.focusEditor = function focusEditor(ev) {\n    this.refs.editor.focus(ev);\n    if (this.props.readOnly) {\n      this._focusDummy.focus();\n    }\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n  };\n  EditorCore.prototype._focus = function _focus(ev) {\n    if (!ev || !ev.nativeEvent || !ev.nativeEvent.target) {\n      return;\n    }\n    if (document.activeElement && document.activeElement.getAttribute('contenteditable') === 'true') {\n      return;\n    }\n    return this.focus(ev);\n  };\n  EditorCore.prototype.focus = function focus(ev) {\n    var _this4 = this;\n    var event = ev && ev.nativeEvent;\n    if (event && event.target === this._editorWrapper) {\n      var editorState = this.state.editorState;\n      var selection = editorState.getSelection();\n      if (!selection.getHasFocus()) {\n        if (selection.isCollapsed()) {\n          return this.setState({\n            editorState: EditorState.moveSelectionToEnd(editorState)\n          }, function () {\n            _this4.focusEditor(ev);\n          });\n        }\n      }\n    }\n    this.focusEditor(ev);\n  };\n  EditorCore.prototype.getPlugins = function getPlugins() {\n    return this.state.plugins.slice();\n  };\n  EditorCore.prototype.getEventHandler = function getEventHandler() {\n    var _this5 = this;\n    var enabledEvents = ['onUpArrow', 'onDownArrow', 'handleReturn', 'onFocus', 'onBlur', 'onTab', 'handlePastedText'];\n    var eventHandler = {};\n    enabledEvents.forEach(function (event) {\n      eventHandler[event] = _this5.generatorEventHandler(event);\n    });\n    return eventHandler;\n  };\n  EditorCore.prototype.getEditorState = function getEditorState() {\n    var needFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (needFocus) {\n      this.refs.editor.focus();\n    }\n    return this.state.editorState;\n  };\n  EditorCore.prototype.setEditorState = function setEditorState(editorState) {\n    var _this6 = this;\n    var focusEditor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var triggerChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var newEditorState = editorState;\n    this.getPlugins().forEach(function (plugin) {\n      if (plugin.onChange) {\n        var updatedEditorState = plugin.onChange(newEditorState);\n        if (updatedEditorState) {\n          newEditorState = updatedEditorState;\n        }\n      }\n    });\n    if (this.props.onChange && triggerChange) {\n      this.props.onChange(newEditorState);\n      // close this issue https://github.com/ant-design/ant-design/issues/5788\n      // when onChange not take any effect\n      // `<Editor />` won't rerender cause no props is changed.\n      // add an timeout here,\n      // if props.onChange not trigger componentWillReceiveProps,\n      // we will force render Editor with previous editorState,\n      if (this.controlledMode) {\n        this.forceUpdateImmediate = setImmediate(function () {\n          return _this6.setState({\n            editorState: new EditorState(_this6.state.editorState.getImmutable())\n          });\n        });\n      }\n    }\n    if (!this.controlledMode) {\n      this.setState({\n        editorState: newEditorState\n      }, focusEditor ? function () {\n        return setImmediate(function () {\n          return _this6.refs.editor.focus();\n        });\n      } : noop);\n    }\n  };\n  EditorCore.prototype.handleKeyBinding = function handleKeyBinding(ev) {\n    if (this.props.onKeyDown) {\n      ev.ctrlKey = hasCommandModifier(ev);\n      var keyDownResult = this.props.onKeyDown(ev);\n      if (keyDownResult) {\n        return keyDownResult;\n      }\n      return getDefaultKeyBinding(ev);\n    }\n    return getDefaultKeyBinding(ev);\n  };\n  EditorCore.prototype.handleKeyCommand = function handleKeyCommand(command) {\n    if (this.props.multiLines) {\n      return this.eventHandle('handleKeyBinding', command);\n    }\n    return command === 'split-block' ? 'handled' : 'not-handled';\n  };\n  EditorCore.prototype.getBlockStyle = function getBlockStyle(contentBlock) {\n    var customBlockStyleMap = configStore.get('customBlockStyleMap');\n    var type = contentBlock.getType();\n    if (customBlockStyleMap.hasOwnProperty(type)) {\n      return customBlockStyleMap[type];\n    }\n    return '';\n  };\n  EditorCore.prototype.blockRendererFn = function blockRendererFn(contentBlock) {\n    var blockRenderResult = null;\n    this.getPlugins().forEach(function (plugin) {\n      if (plugin.blockRendererFn) {\n        var result = plugin.blockRendererFn(contentBlock);\n        if (result) {\n          blockRenderResult = result;\n        }\n      }\n    });\n    return blockRenderResult;\n  };\n  EditorCore.prototype.eventHandle = function eventHandle(eventName) {\n    var _props2;\n    var plugins = this.getPlugins();\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key3 = 1; _key3 < _len; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    for (var i = 0; i < plugins.length; i++) {\n      var plugin = plugins[i];\n      if (plugin.callbacks[eventName] && typeof plugin.callbacks[eventName] === 'function') {\n        var _plugin$callbacks;\n        var result = (_plugin$callbacks = plugin.callbacks)[eventName].apply(_plugin$callbacks, args);\n        if (result === true) {\n          return 'handled';\n        }\n      }\n    }\n    return this.props.hasOwnProperty(eventName) && (_props2 = this.props)[eventName].apply(_props2, args) === true ? 'handled' : 'not-handled';\n  };\n  EditorCore.prototype.generatorEventHandler = function generatorEventHandler(eventName) {\n    var _this7 = this;\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key4 = 0; _key4 < _len2; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return _this7.eventHandle.apply(_this7, [eventName].concat(args));\n    };\n  };\n  EditorCore.prototype.customStyleFn = function customStyleFn(styleSet) {\n    if (styleSet.size === 0) {\n      return {};\n    }\n    var plugins = this.getPlugins();\n    var resultStyle = {};\n    for (var i = 0; i < plugins.length; i++) {\n      if (plugins[i].customStyleFn) {\n        var styled = plugins[i].customStyleFn(styleSet);\n        if (styled) {\n          _extends(resultStyle, styled);\n        }\n      }\n    }\n    return resultStyle;\n  };\n  EditorCore.prototype.render = function render() {\n    var _classnames,\n      _this8 = this;\n    var _props3 = this.props,\n      prefixCls = _props3.prefixCls,\n      toolbars = _props3.toolbars,\n      style = _props3.style,\n      readOnly = _props3.readOnly,\n      multiLines = _props3.multiLines;\n    var _state = this.state,\n      editorState = _state.editorState,\n      toolbarPlugins = _state.toolbarPlugins;\n    var customStyleMap = configStore.get('customStyleMap');\n    var blockRenderMap = configStore.get('blockRenderMap');\n    var eventHandler = this.getEventHandler();\n    var Toolbar = toolbar.component;\n    var cls = classnames((_classnames = {}, _classnames[prefixCls + '-editor'] = true, _classnames.readonly = readOnly, _classnames.oneline = !multiLines, _classnames));\n    return React.createElement('div', {\n      style: style,\n      className: cls,\n      onClick: this._focus.bind(this)\n    }, React.createElement(Toolbar, {\n      editorState: editorState,\n      prefixCls: prefixCls,\n      className: prefixCls + '-toolbar',\n      plugins: toolbarPlugins,\n      toolbars: toolbars\n    }), React.createElement('div', {\n      className: prefixCls + '-editor-wrapper',\n      ref: function ref(ele) {\n        return _this8._editorWrapper = ele;\n      },\n      style: style,\n      onClick: function onClick(ev) {\n        return ev.preventDefault();\n      }\n    }, React.createElement(Editor, _extends({}, this.props, eventHandler, {\n      ref: 'editor',\n      customStyleMap: customStyleMap,\n      customStyleFn: this.customStyleFn.bind(this),\n      editorState: editorState,\n      handleKeyCommand: this.handleKeyCommand.bind(this),\n      keyBindingFn: this.handleKeyBinding.bind(this),\n      onChange: this.setEditorState.bind(this),\n      blockStyleFn: this.getBlockStyle.bind(this),\n      blockRenderMap: blockRenderMap,\n      handlePastedText: this.handlePastedText,\n      blockRendererFn: this.blockRendererFn.bind(this)\n    })), readOnly ? React.createElement('input', {\n      style: focusDummyStyle,\n      ref: function ref(ele) {\n        return _this8._focusDummy = ele;\n      },\n      onBlur: eventHandler.onBlur\n    }) : null, this.props.children));\n  };\n  return EditorCore;\n}(React.Component);\nEditorCore.GetText = exportText;\nEditorCore.GetHTML = GetHTML(configStore);\nEditorCore.defaultProps = {\n  multiLines: true,\n  plugins: [],\n  prefixCls: 'rc-editor-core',\n  pluginConfig: {},\n  toolbars: [],\n  spilitLine: 'enter'\n};\nEditorCore.childContextTypes = {\n  getEditorState: PropTypes.func,\n  setEditorState: PropTypes.func\n};\nexport default EditorCore;","map":null,"metadata":{},"sourceType":"module"}