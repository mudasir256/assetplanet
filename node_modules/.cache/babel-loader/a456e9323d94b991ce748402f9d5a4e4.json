{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\nimport * as React from 'react';\nimport { Consumer } from './CookiesContext';\n// Only way to make function modules work with both TypeScript and Rollup\nvar hoistStatics = require('hoist-non-react-statics');\nexport default function withCookies(WrapperComponent) {\n  // @ts-ignore\n  var name = WrapperComponent.displayName || WrapperComponent.name;\n  var CookieWrapper = /** @class */function (_super) {\n    __extends(CookieWrapper, _super);\n    function CookieWrapper() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.onChange = function () {\n        // Make sure to update children with new values\n        _this.forceUpdate();\n      };\n      return _this;\n    }\n    CookieWrapper.prototype.listen = function () {\n      this.props.cookies.addChangeListener(this.onChange);\n    };\n    CookieWrapper.prototype.unlisten = function (cookies) {\n      (cookies || this.props.cookies).removeChangeListener(this.onChange);\n    };\n    CookieWrapper.prototype.componentDidMount = function () {\n      this.listen();\n    };\n    CookieWrapper.prototype.componentDidUpdate = function (prevProps) {\n      if (prevProps.cookies !== this.props.cookies) {\n        this.unlisten(prevProps.cookies);\n        this.listen();\n      }\n    };\n    CookieWrapper.prototype.componentWillUnmount = function () {\n      this.unlisten();\n    };\n    CookieWrapper.prototype.render = function () {\n      var _a = this.props,\n        forwardedRef = _a.forwardedRef,\n        cookies = _a.cookies,\n        restProps = __rest(_a, [\"forwardedRef\", \"cookies\"]);\n      var allCookies = cookies.getAll();\n      return React.createElement(WrapperComponent, __assign({}, restProps, {\n        ref: forwardedRef,\n        cookies: cookies,\n        allCookies: allCookies\n      }));\n    };\n    CookieWrapper.displayName = \"withCookies(\" + name + \")\";\n    CookieWrapper.WrapperComponent = WrapperComponent;\n    return CookieWrapper;\n  }(React.Component);\n  var CookieWrapperWithRefAndCookieConsumer = React.forwardRef(function (props, ref) {\n    return React.createElement(Consumer, null, function (cookies) {\n      return React.createElement(CookieWrapper, __assign({\n        cookies: cookies\n      }, props, {\n        forwardedRef: ref\n      }));\n    });\n  });\n  return hoistStatics(CookieWrapperWithRefAndCookieConsumer, WrapperComponent, {\n    WrappedComponent: true\n  });\n}","map":null,"metadata":{},"sourceType":"module"}